type
  TWasp = record
    Antiban: TAntiban;
    StatsDebugTick: Int64;
  end;

var
  Wasp: TWasp;
  CraftCapeDTM := DTMFromString('mggAAAHicY2NgYJjCxMAwA4inAXE/EM8C4qlA/Bgo9wqI3wHxeyC+B8SfgVhUUJAhxEGPIT3ACshjRMLkAAAg3Qr7');
  DuelRingDTM := DTMFromString('mggAAAHicY2NgYNjJxMCwHYh3APEBIN4ExAeBuIGRgaEDiLuAuBWIW4C4FojvHpQCYwYGRjgW7BNlIA8AAE1QC7M=');

function RandomBoolean(Probability: Int32 = 50): Boolean;
begin
  Result := Random(1, 100) <= Probability;
end;

function StringSpacer(Str: String; CharAmount: Int32 = 10): String;
var
  i: Int32;
begin
  Result := Str;
  for i := 0 to (CharAmount - Result.Len()) do
    Result += ' ';
end;

function StringSpacer(Number: Int64; CharAmount: Int32 = 10): String; overload;
var
  i: Int32;
begin
  Result := IntToStr(Number);
  for i := 0 to (CharAmount - Result.Len()) do
    Result += ' ';
end;

function StringSpacer(Number: Extended; CharAmount: Int32 = 10): String; overload;
var
  i: Int32;
begin
  Result := IntToStr(Round(Number));
  for i := 0 to (CharAmount - Result.Len()) do
    Result += ' ';
end;


function GetPrice(Item: String): Int32;
var
  Link, Price: String;
begin
  Item := Replace(LowerCase(Item), ' ', '-',[rfReplaceAll]);

  Link := GetPage('https://www.ge-tracker.com/item/' + Item);
  Price:= between('<td id="item_stat_overall">','</td>', Link);
  Result := StrToIntDef(replace(Price, ',', '', [rfReplaceAll]), 0);
end;

function ConvertToRSGP(Amount: Int64): String;
var
  StringLength: Int32;
  Divider: UInt32;
  Suffix: String;
begin
  Result := '';
  StringLength := Length(IntToStr(Amount));
  if StringLength <= 3 then
  begin
    Suffix := '';
    Divider := 1;
  end
  if (StringLength >= 4) and (StringLength <= 6) then
  begin
    Suffix := 'k';
    Divider := 1000;
  end
  else if (StringLength >= 7) and (StringLength <= 9) then
  begin
    Suffix := 'm';
    Divider := 1000000;
  end
  else if (StringLength >= 10) and (StringLength <= 12) then
  begin
    Suffix := 'b';
    Divider := 1000000000;
  end
  else Exit();

  Result := FloatToStr(Round(Amount/Divider, 2)) + Suffix;
end;

function ConvertToRSGP(Amount: Extended): String; overload;
var
  StringLength: Int32;
  Divider: UInt32;
  Suffix: String;
begin
  Result := '';
  StringLength := Length(FloatToStr(Amount));
  if StringLength <= 3 then
  begin
    Suffix := '';
    Divider := 1;
  end
  if (StringLength >= 4) and (StringLength <= 6) then
  begin
    Suffix := 'k';
    Divider := 1000;
  end
  else if (StringLength >= 7) and (StringLength <= 9) then
  begin
    Suffix := 'm';
    Divider := 1000000;
  end
  else if (StringLength >= 10) and (StringLength <= 12) then
  begin
    Suffix := 'b';
    Divider := 1000000000;
  end
  else Exit();

  Result := FloatToStr(Round(Amount/Divider, 2)) + Suffix;
end;


function Wasp.HasItem(DTM: Integer; Equippable: Boolean = True; MouseMove: Boolean = True): Boolean;
var
  InvCheck, EquipCheck: Boolean = False;
  i: Int32;
begin
  Result := False;
  EquipCheck := not Equippable; //Quick way to skip checking the equipment if
                                //the item is not equippable.
  for i := 0 to 1 do
  begin
    if ((not InvCheck) and (not EquipCheck) and
    (not Inventory.IsOpen()) and (not Equipment.IsOpen())) then begin
      if (Random(0, 1) = 0) then
        Inventory.Open()
      else
        Equipment.Open();
    end else if (InvCheck and (not EquipCheck)) then
      Equipment.Open()
    else if (EquipCheck and (not InvCheck)) then
      Inventory.Open();

    if Inventory.IsOpen() then begin
      if Inventory.FindDTM(DTM) then
      begin
        if MouseMove then
          Inventory.MouseSlot(Inventory.FindDTM(DTM)[0]);
        Exit(True);
      end;
      InvCheck := True;
    end else if Equipment.IsOpen() then begin
      if Equipment.FindDTM(DTM) then
      begin
        if MouseMove then
          Equipment.MouseSlot(Equipment.FindDTM(DTM)[0]);
        Exit(True);
      end;
      EquipCheck := True;
    end;
  end;
end;


procedure Wasp.Free();
begin
  FreeDTMs([CraftCapeDTM, DuelRingDTM]);
end;

begin
  AddOnTerminate(@Wasp.Free);
end;
