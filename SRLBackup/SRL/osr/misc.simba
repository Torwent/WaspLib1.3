(*
Misc
=====
The ``osr/misc.simba`` file contains various RS related funcions that doesn't fit elsewhere
*)

(*
type ERSClickType
~~~~~~~~~~~~~~~~~~~~
.. pascal:: type ERSClickType = (ctNone, ctRed, ctYellow);
*)
type
  ERSClickType = (ctNone, ctRed, ctYellow);

  
(*
Mouse.Click
~~~~~~~~~~~~
.. pascal:: function TMouse.Click(ClickType: ERSClickType): Boolean; overload;

Leftclicks the mouse returns ``True`` if the click passed through as expected.
Useful when expecting a red or yellow X after a click.
*)
function TMouse.Click(ClickType: ERSClickType): Boolean; overload;

  function FindColorEx(Color, Tolerance: Int32; Area: TBox): TPointArray;
  begin
    FindColorsTolerance(Result, Color, Area, Tolerance);
  end;

var
  B: TBox;
  P: TPoint;
  T: UInt64;
  Red, Yellow: Int32;
  TPA: TPointArray;
begin
  P := Self.GetPosition();
  B := [P.X - 8, P.Y - 8, P.X + 8, P.Y + 8];
  B.LimitTo(GetClientBounds());

  Self.Click(mouse_Left);

  T := GetTickCount + Random(250, 300);
  while (T > GetTickCount()) do
  begin
    Red := 0;
    Yellow := 0;

    TPA := FindColorEx($000000, 5, B);

    for P in FindColorEx($00FFFF, 5, B) do
      if NearbyPointInArray(P, 1, TPA) then
        Yellow += 1;

    for P in FindColorEx($0000FF, 5, B) do
      if NearbyPointInArray(P, 1, TPA) then
        Red += 1;

    if (Red >= 12) and (Red >= Yellow) and (ClickType = ctRed) then
      Exit(True);
    if (Yellow >= 12) and (Yellow >= Red) and (ClickType = ctYellow) then
      Exit(True);

    Wait(50);
  end;
end;

(*
SRL.GetXPAtLevel
~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.GetXPAtLevel(level:Int32): Int32;

Given a level it returns the minimum XP needed for it.
*)
function TSRL.GetXPAtLevel(level:Int32): Int32;
var
  total:Double;
  i:Int32;
begin
  for i:=1 to level-1 do
    total += Floor(i + 300 * 2 ** (i / 7));
  Result := Floor(total / 4);
end;

(*
SRL.GetLevelAtXP
~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.GetLevelAtXP(XP:UInt32): Int32;

Given some XP, it returns what level that is.
*)
function TSRL.GetLevelAtXP(XP:UInt32): Int32;
var 
  total:Double;
begin
  while (total < XP*4+1) do
  begin  
    Inc(Result);
    total += Floor(Result + 300 * 2 ** (Result / 7));
  end;
end;

(*
SRL.GetItemAmount
~~~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.GetItemAmount(Area: TBox): Int32;

For use with items in like bankscreen, inventory, shops and so on to
get the number of stacked items there are.
*)
function TSRL.GetItemAmount(Area: TBox): Int32;
const
  TEXT_COLORS: TIntegerArray = [65535, 65278, 16777215, 8453888]; // Million = white | Billion = green etc.
var
  i: Integer;
  Text: String;
  b: TBox;
  TPA: TPointArray;
begin
  for i := 0 to High(TEXT_COLORS) do
    if (System.FindColors(TPA, TEXT_COLORS[i], Area.X1, Area.Y1, Area.X2, Area.Y2)) then
    begin
      b := GetTPABounds(TPA).Expand(2, GetClientBounds());

      Text := StringReplace(GetTextAtEx(b, 0, 3, 3, TEXT_COLORS[i], 5, 'StatChars07'), 'O', '0', [rfReplaceAll]);
      Result := StrToIntDef(ExtractFromStr(Text, Numbers), 0);

      if Pos('K', Text) > 0 then
        Result := Result * 1000;
      if Pos('M', Text) > 0 then
        Result := Result * 1000000;

      Exit;
    end;
end;

(*
SRL.FindDTMInTBA
~~~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.FindDTMInTBA(DTM: Integer; Areas: TBoxArray; MaxToFind: Int32 = 0): TIntArray;

Searches for the DTM in all of the boxes `Areas`. You can specify a max to find ``MaxToFind`` so that it breaks 
out early, and doesn't spend more time than what's needed. By default it's 0, which means find them all.

The result is a list of all the box-id's where it was located.
*)
function TSRL.FindDTMInTBA(DTM: Integer; Areas: TBoxArray; MaxToFind: Int32 = 0): TIntArray;
var
  i: Int32;
  pt: TPoint;
begin
  for i:=0 to High(Areas) do
    if FindDTM(DTM, pt.x, pt.y, Areas[i]) then
    begin
      Result += i;
      if Length(Result) = MaxToFind then 
        Break;
    end;
end;

(*
SRL.FindMaskInTBA
~~~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.FindMaskInTBA(Mask: TMask; Tolerance, ContourTolerance: Int32; Areas: TBoxArray; MaxToFind: Int32 = 0): TIntArray;

Searches for the mask in all of the boxes `Areas`. You can specify a max to find ``MaxToFind`` so that it breaks 
out early, and doesn't spend more time than what's needed. By default it's 0, which means find them all.

The result is a list of all the box-id's where it was located.
*)
function TSRL.FindMaskInTBA(Mask: TMask; Tolerance, ContourTolerance: Int32; Areas: TBoxArray; MaxToFind: Int32 = 0): TIntArray;
var
  i: Int32;
  pt: TPoint;
begin
  for i:=0 to High(Areas) do
    if (FindMaskTolerance(Mask, pt.x, pt.y, Areas[i], Tolerance, ContourTolerance)) then
    begin
      Result += i;
      if Length(Result) = MaxToFind then 
        Break;
    end;
end;

(*
SRL.FindBMPInTBA
~~~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.FindBMPInTBA(BMP: TMufasaBitmap; Tolerance: Int32; Areas: TBoxArray; MaxToFind: Int32 = 0): TIntArray;

Searches for the BMP in all of the boxes `Areas`. You can specify a max to find ``MaxToFind`` so that it breaks 
out early, and doesn't spend more time than what's needed. By default it's 0, which means find them all.

The result is a list of all the box-id's where it was located.
*)
function TSRL.FindBMPInTBA(BMP: TMufasaBitmap; Tolerance: Int32; Areas: TBoxArray; MaxToFind: Int32 = 0): TIntArray;
var
  i: Int32;
  pt: TPoint;
begin
  for i:=0 to High(Areas) do
    if (FindBitmapToleranceIn(BMP.GetIndex(), pt.x, pt.y, Areas[i], Tolerance)) then
    begin
      Result += i;
      if Length(Result) = MaxToFind then 
        Break;
    end;
end;



(*
SRL.AvgBrightness
~~~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.AvgBrightness(B: TBox): Int32;

Returns the average brightness of a area on the screen. 
Returns a value between ``0`` and ``100``, ``0`` being black.
*)
function TSRL.AvgBrightness(B: TBox): Int32;
var
  BMP: TMufasaBitmap;
begin
  BMP.FromClient(B);
  Result := BMP.AvgBrightness();
  BMP.Free();
end;

(*
SRL.PeakBrightness
~~~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.PeakBrightness(B: TBox): Int32;

Returns the peak brightness of a area on the screen. 
Returns a value between ``0`` and ``100``, ``0`` being black.
*)
function TSRL.PeakBrightness(B: TBox): Int32;
var
  BMP: TMufasaBitmap;
begin
  BMP.FromClient(B);
  Result := BMP.PeakBrightness();
  BMP.Free();
end;



