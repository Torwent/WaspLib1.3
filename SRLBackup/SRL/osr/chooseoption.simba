(*
ChooseOption
============
The ChooseOption file holds functions and procedures that are related to the
ingame context menu.
*)

type
  TOption = record
    Str: String;
    Bounds: TBox;
  end;
  TOptionArray = array of TOption;

(*
type TRSChooseOption
~~~~~~~~~~~~~~~~~~~~
The type that holds functions and properties of the context menu.
*)
type
  TRSChooseOption = record
    Bounds: TBox;
    MouseSpeed: Int32;
    {$IFNDEF CODEINSIGHT}
    BoxBitmap: PtrInt;
    BoxBitmap_Width: Int32;
    BoxBitmap_Height: Int32;
    {$ENDIF}
  end;

(*
var ChooseOption
~~~~~~~~~~~~~~~~
Variable that stores functions and properties of the context menu.
*)
var
  ChooseOption: TRSChooseOption;

{$IFNDEF CODEINSIGHT}
procedure TRSChooseOption.__Setup();
begin
  BoxBitmap := BitmapFromString(20, 18, 'meJxzD4l1pwAxkAsGj15Mv+DyGp' +
        'ogXBmyemL04lEzgHqxhgPxehkwwoEkN9NCLwMRcYRHL5rvSNVLPBhAvWQjAO6IcGE=');
  GetBitmapSize(BoxBitmap, BoxBitmap_Width, BoxBitmap_Height);
  MouseSpeed := Random(8,10);
end;

procedure TRSChooseOption.__Free();
begin
  FreeBitmap(BoxBitmap);
end;
{$ENDIF}


(*
ChooseOption.Open
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.Open(): Boolean;

Opens the optionbox, returns true if it worked.

.. note:: by slacky
*)
function TRSChooseOption.Open(tryTime:Int32=-1): Boolean;
begin
  Mouse.Click(mouse_right);
  Result := self.Find(tryTime);
end;


(*
ChooseOption.Open
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.Open(Box:TBox): Boolean; overload;

Opens the menu and stores it's bounds, returns true if it worked.

.. note:: by slacky
*)
function TRSChooseOption.Open(Box:TBox; tryTime:Int32=-1): Boolean; overload;
begin
  Mouse.Click(Box, mouse_right);
  Result := self.Find(tryTime);
end;


(*
ChooseOption.IsOpen
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.IsOpen(): Boolean;

Checks if the menu is open, it repeats the check for a +/-2 sec if it's ``False`` (expecting it to open).

.. note:: by slacky
*)
function TRSChooseOption.IsOpen(tryTime:Int32=-1): Boolean;
begin
  Result := self.Find(tryTime);
end;

(*
ChooseOption.IsClosed
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.IsClosed(): Boolean;

Checks if the menu is closed, it repeats the check for a +/-650ms if it's ``True`` (expecting it to close).

.. note:: by slacky
*)
function TRSChooseOption.IsClosed(maxWaitTime:Int32=-1; IntervalMS:Int32=25): Boolean;
var t:UInt64;
begin
  if maxWaitTime < 0 then
    maxWaitTime := Random(500,800);
  t := GetTickCount() + maxWaitTime;
  while self.IsOpen(0) and (GetTickCount() < t) do
    Wait(IntervalMS);
  Result := not(self.IsOpen(0));
end;

(*
ChooseOption.Find
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.Find(): Boolean;

Is used internally to find the option-menu, and store the coordinates in the instance.
Returns True if it's found.

.. note:: by slacky
*)
function TRSChooseOption.Find(WaitTime: Int32 = -1): Boolean;
var
  P: TPoint;
  TPA:TPointArray;
  ATPA:T2DPointArray;
  T: UInt64;
  B:TBox := GetClientBounds();
begin
  Self.Bounds := [0,0,0,0];

  if WaitTime < 0 then
    T := GetTickCount() + Random(1500, 2500)
  else
    T := GetTickCount() + WaitTime;

  repeat
    if FindBitmap(Self.BoxBitmap, P.X, P.Y) then
    begin
      P.Y += BoxBitmap_Height;

      if FindColors(TPA, 0, P.X, P.Y, B.X2, B.Y2) then
      begin
        ATPA := ClusterTPAEx(TPA, 1, 1);
        SortATPAFromFirstPoint(ATPA, P);

        Self.Bounds := GetTPABounds(ATPA[0]).Expand(1);
        Self.Bounds.LimitTo(B);

        Exit(True);
      end;
    end;

    if (WaitTime <> 0) then
      Wait(10, 100, wdLeft);
  until (GetTickCount() >= T);
end;

(*
ChooseOption.GetOptions
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.GetOptions(): TOptionArray;

Returns each option in the menu.

.. note:: by slacky
*)
function TRSChooseOption.GetOptions(): TOptionArray;
var
  b: TBox;
  i:Int32;
  menu,tmp: TMufasaBitmap;
begin
  if not(self.Find(0)) then
    self.Open();

  with self.Bounds do
  begin
    if (x1=x2) or (y1=y2) then
      Exit;

    menu := GetMufasaBitmap(BitmapFromClient(x1,y1,x2,y2));
    menu.ReplaceColor(4674653, 0);
    menu.ThresholdAdaptive(0,255,False,TM_Mean,-1);

    SetLength(Result, (y2 - y1 + 1) div 15);
    for i:=0 to High(Result) do
    begin
      B.x1 := 2;
      B.y1 := i * 15 + 2;
      B.x2 := (x2 - x1) - 2;
      B.y2 := B.y1 + 15;
      if B.y2 <= y2-y1 then
      begin
        tmp := menu.Copy(B.x1,B.y1,B.x2,B.y2);
        Client.GetMBitmaps.AddBMP(tmp);
        Result[i].str := ocr.RecognizeEx(tmp.ToMatrix(),FontSetting(255,1), UpFont);
        tmp.Free();
      end;
      B.Offset(Point(x1, y1));
      Result[i].Bounds := B;
    end;
    menu.Free();
  end;
end;

(*
ChooseOption.SelectID
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.SelectID(ID: Int32; MouseAction: Int32=mouse_left; CloseIt: Boolean=True): Boolean;

By default it will click the given option `ID`, if it's not there the menu will be closed.
Returns True if the select-action was performed.

Slows down the mouse movement for more realistic sliding through the lines of text.

.. note:: by slacky
*)
function TRSChooseOption.SelectID(ID: Int32; MouseAction:Int32=mouse_left; CloseIt:Boolean=True): Boolean;
var
  Mouse2: TMouse;
  avg: TBox;
  choices: TOptionArray;
  r,l: Int32;
  didRnd: Boolean;
begin
  choices := Self.GetOptions(); // open and return options.
  L := Length(choices);
  if L <= 0 then
    Exit(False);

  Mouse2 := Mouse;
  Mouse2.Speed := Self.MouseSpeed;

  if InRange(ID,0,L-1) then
  begin
    repeat
      if Random() > 0.667 then
      begin
        r := Round(srl.SkewedRand(r+6,r+0,High(choices)));
        if r < ID then
        begin
          Mouse2.Move(choices[r].Bounds, False, rndSkewed);
          Wait(250,900, wdLeft);
          didRnd := True;
        end;
      end;
    until (Random() > 0.10) or (r >= ID);

    if (not didRnd) then
    begin
      avg := choices[Max(0,Min(L-1,srl.NormalRange(ID-2, ID+2)))].Bounds;
      Mouse2.Move(avg,False,rndSkewed);
      WaitEx(80,20);
      with choices[ID].Bounds do with Mouse2.GetPosition() do
        avg := [Max(X-10,X1), Y1, Min(X+10,X2), Y2];
      Mouse2.Move(avg,False,rndSkewed);
    end;

    Mouse2.Click(choices[ID].Bounds, MouseAction);
    if self.IsClosed() then
      Exit(True);
  end;

  WaitEx(360,70); // don't want inhumane reactions when the option isn't found
  if CloseIt then
    Self.Close();
end;

(*
ChooseOption.Select
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.Select(SubStrings: TStringArray; MouseAction:Int32=mouse_left; AClose:Boolean=True; CaseSensitive:Boolean=True): Boolean;
  function TRSChooseOption.Select(Option: String; MouseAction:Int32=mouse_left; AClose:Boolean=True; CaseSensitive:Boolean=True): Boolean;

Same as SelectID, except that this will look for the option by it's text, rather than by id.
*)
function TRSChooseOption.Select(SubStrings: TStringArray; MouseAction:Int32=mouse_left; CloseIt:Boolean=True; CaseSensitive:Boolean=True): Boolean; overload;
var
  i,j,l: Int32;
  choices: TOptionArray;
begin
  choices := Self.GetOptions();

  L := Length(Choices);
  if L = 0 then Exit(False);

  for i:=0 to L-1 do
    for j:=0 to High(SubStrings) do
      if (CaseSensitive and (SubStrings[j] in Choices[i].Str)) or
         ((not CaseSensitive) and (Lowercase(SubStrings[j]) in Lowercase(Choices[i].Str))) then
        Exit(Self.SelectID(i, mouseAction, CloseIt));

  WaitEx(360,70); // don't want inhumane reactions when the option isn't found
  if CloseIt then
    Self.Close();
end;

function TRSChooseOption.Select(Option: String; mouseAction:Int32=mouse_left; AClose:Boolean=True; CaseSensitive:Boolean=True): Boolean; overload;
begin
  Result := Self.Select([Option], mouseAction, AClose, CaseSensitive);
end;

(*
ChooseOption.MissSelect
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.MissSelect(Option, MissOpt: TStringArray; ChanceOfMiss: Int32=5): Boolean;
  function TRSChooseOption.MissSelect(Option, MissOpt: String; ChanceOfMiss: Int32=5): Boolean;

For example, click Inspect when you meant to click Drop. By default there's a 5% chance of misclick,
it will automatically click the right one after a missclick.
*)
function TRSChooseOption.MissSelect(Option, MissOpt: TStringArray; ChanceOfMiss: Int32=5): Boolean;
var
  i,j,l: Int32;
  choices: TOptionArray;
  P: TPoint;
begin
  P := Mouse.GetPosition();
  while (Random(100) < ChanceOfMiss) do
  begin
    Self.Select(MissOpt);
    Wait(35,800, wdLeft);
    Self.IsClosed(srl.NormalRange(900,1300));
    Mouse.Move(P.Random(3,3, True));
  end;

  Result := Self.Select(Option);
end;

function TRSChooseOption.MissSelect(Option, MissOpt: String; ChanceOfMiss: Int32=5): Boolean; overload;
begin
  Result := Self.MissSelect([Option], [MissOpt], ChanceOfMiss);
end;


(*
ChooseOption.Close
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSChooseOption.Close(tryTime:Int32=-1): Boolean;

Closes the option menu by dragging the mouse away from it, if that
failed it clicks the "Close"-option.

.. note:: by slacky
*)
function TRSChooseOption.Close(tryTime:Int32=-1): Boolean;
var
  B:TBox;
  pt:TPoint;
  dir: record R,T: Double; end;
  OldHook: TMouseMovedEvent;

  procedure TrackMovment(Sender: Pointer; X,Y: Int32); static;
  begin
    if not ChooseOption.Find(0) then
      RaiseException('Finally');
  end;
begin
  if not self.IsOpen(tryTime) then
    Exit(True);

  OldHook := @mouse.OnMoved;
  Mouse.OnMoved := Pointer(@TrackMovment);
  with self.Bounds do B := [x1,y1-BoxBitmap_Height,x2,y2];

  pt := Mouse.GetPosition();
  dir := [Abs(pt.x - B.x1), Pi];
  if dir.R > Abs(pt.y - B.y1) then dir := [Abs(pt.y - B.y1), -(Pi/2)];
  if dir.R > Abs(pt.x - B.x2) then dir := [Abs(pt.x - B.x2), 0];
  if dir.R > Abs(pt.y - B.y2) then dir := [Abs(pt.y - B.y2), (Pi/2)];

  dir.T := (dir.T-Pi/3) + Random()*(2*Pi/3);

  //if option box is flush to the left of client and taller than 500px set move direction to the right
  if (B.X1 < 15) and ((B.Y2 - B.Y1) > 500) then
    dir.T := Random(Arctan((B.Y1 - pt.Y) / ((B.X2 + 20) - pt.x)),
                    Arctan((B.Y2 - pt.Y) / ((B.X2 + 20) - pt.x)));

  try
    Mouse.Move(pt.x+Round(300*Cos(dir.T)), pt.y+Round(300*Sin(dir.T)));
    self.Select(['Cancel']);
    Result := self.IsClosed();
  except
    Result := self.IsClosed();
  end;

  Mouse.OnMoved := @OldHook;
end;

begin
  ChooseOption.__Setup();
  AddOnTerminate(@ChooseOption.__Free);
end;
