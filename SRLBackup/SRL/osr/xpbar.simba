(*
XPBar
======
XPBar related methods
*)
type
  TRSXPBar = record(TInterfaceBase)
    Button: TCircle;
  end;

var
  XPBar: TRSXPBar;

(*
XPBar.Find
~~~~~~~~~~
.. pascal:: function TRSXPBar.Find: Boolean;

Searches for the XP bar in the top right of the mainscreen.
If found the bounds will be updated and `True` will be returned.
*)
function TRSXPBar.Find: Boolean;
const
  COLOR_BORDER_INNER = 4543066; // inner border so cluster cannot fail.
  INTERFACE_HEIGHTS = [27, 36];
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  B: TBox;
begin
  B := [365, 0, 515, 55]; // top right MS

  if FindColors(TPA, COLOR_BORDER_INNER, B) then
    for TPA in TPA.Cluster(1) do
    begin
      B := TPA.Bounds();

      if B.Height() in [INTERFACE_HEIGHTS[0], INTERFACE_HEIGHTS[1]] then
      begin
        Self.SetBounds(B.Expand(1));

        Exit(True);
      end;
    end;
end;

(*
XPBar.IsOpen
~~~~~~~~~~~~
.. pascal:: function TRSXPBar.IsOpen: Boolean;

Returns true is the XPBar is open.
*)
function TRSXPBar.IsOpen: Boolean; overload;
begin
  Result := Self.Find();
end;

(*
XPBar.IsOpen (overload)
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSXPBar.IsOpen(Time: Int32): Boolean;

Waits up to `Time` for the XP bar to be open.
*)
function TRSXPBar.IsOpen(Time: Int32): Boolean; overload;
var
  T: UInt64 := GetTickCount() + Time;
begin
  while (T > GetTickCount()) do
  begin
    if Self.IsOpen() then
      Exit(True);

    Wait(Random(50, 100));
  end;
end;

(*
XPBar.Find
~~~~~~~~~~
.. pascal:: function TRSXPBar.IsClosed(Time: Int32): Boolean;

Waits up to `Time` for the XP bar to be closed.
*)
function TRSXPBar.IsClosed(Time: Int32): Boolean;
var
  T: UInt64 := GetTickCount() + Time;
begin
  while (T > GetTickCount()) do
  begin
    if not Self.IsOpen() then
      Exit(True);

    Wait(Random(50, 100));
  end;
end;

(*
XPBar.Toggle
~~~~~~~~~~~~
.. code-block:: pascal function TRSXPBar.Toggle(Enable: Boolean): Boolean;

Opens or closes the XP bar.
*)
function TRSXPBar.Toggle(Enable: Boolean): Boolean;
begin
  Result := True;

  if (Self.IsOpen() <> Enable) then
  begin
    Mouse.Click(Self.Button.Mean, Self.Button.Radius, MOUSE_LEFT);

    if Enable then
      Result := Self.IsOpen(Random(3000, 3500))
    else
      Result := Self.IsClosed(Random(3000, 3500));
  end;
end;

(*
XPBar.Read
~~~~~~~~~~
.. code-block:: pascal function TRSXPBar.Read: Int32;

Opens the XP bar if needed and returns the current total.
*)
function TRSXPBar.Read: Int32;

  function GetFont(TPA: TPointArray): String;
  begin
    case TPA.Bounds().Height of
      10: Exit('UpChars07_s');
      11: Exit('SmallChars07');
       8: Exit('StatChars07');
      else
        SRL.WriteLn('Unknown XP bar font', dtFatal);
    end;
  end;

var
  TPA: TPointArray;
  Text: String;
  T: UInt64 := GetTickCount() + 7500;
begin
  while (T > GetTickCount()) do
  begin
    if Self.Toggle(True) then
    begin
      if FindColors(TPA, $FFFFFF, Self.GetBounds()) then
      begin
        Text := SRL.GetTextFromTPA(TPA, 1, 3, 1, GetFont(TPA));
        // `0` and `O` glyph are equal and depending on how your OS orders files
        // either can match. We're only looking for numbers though so this works. :)
        Text := StringReplace(Text, 'O', '0', [rfReplaceAll]);
        Result := StrToInt(ExtractFromStr(Text, Numbers));
        Exit;
      end else
        SRL.WriteLn('Failed to find text in XP bar');
    end else
      SRL.WriteLn('Failed to open XP bar');

    Wait(100);
  end;

  Exit(-1);
end;

begin
  XPBar.Button := [529, 34, 10];
end;
