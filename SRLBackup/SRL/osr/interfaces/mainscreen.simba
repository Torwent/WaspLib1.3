(*
MainScreen
==========

This file holds functions and procedures that are used for the mainscreen.

 * Ouputs a global variable 'MainScreen' that should be used to call these methods.

.. code-block:: pascal

    srl.Writeln(MainScreen.GetUpText());
*)
type
  THPBar = record
    Bounds: TBox;
    Percent: Extended;
  end;
  THPBarArray = array of THPBar;
  
  TMSText = record 
    Bounds: TBox; 
    Text: String; 
  end;
  TMSTextArray = Array of TMSText;  

  TRSMainScreen = record(TInterfaceBase)
    UpTextArea: TBox;
    UpTextFilter: TCompareRules; //avilable to modify from script! :)
  end;

var
  MainScreen: TRSMainScreen;



{$IFNDEF CODEINSIGHT}
procedure TRSMainScreen.__Setup();
begin
  with Self do
  begin
    SetName('Mainscreen');
    SetStatic(True);
    SetBounds([4, 4, 515, 337]);

    UpTextArea := [7, 7, 465, 25];
    UpTextFilter := [-1, 85, True, 55];
  end;
end;
{$ENDIF}

(*
MainScreen.GetUpText
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainScreen.GetUpText(): String;

Returns the current uptext (Text in top left of the screen).

Example:

.. code-block:: pascal

    srl.Writeln(MainScreen.GetUpText());
*)
function TRSMainScreen.GetUpText(): String;
begin
  Result := OCR.Recognize(Self.UpTextArea, Self.UpTextFilter, UpFont);
  if (Result = '') then
    Result := OCR.Recognize(Self.UpTextArea, Self.UpTextFilter, UpFont, 350);
  
  {$IFDEF UPTEXT_DEBUG}
    srl.Writeln('UpText found: ' + Result);
  {$ENDIF}
end;

(*
MainScreen.IsUpText
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainScreen.IsUpText(Strings: TStringArray; Timeout: Int32 = -1; Confirm: Int32 = 50): Boolean;

Returns True if any of the strings are in the uptext, will search until `Timeout` is reached.

 * `Confirm` by default will wait 50 milliseconds after uptext has been found and check if the uptext is still correct,
    this is because RS uptext is delayed at least a frame.

 * `Timeout` by default is -1 which will search for between 85 to 200 milliseconds.

Example:

.. code-block:: pascal

    if MainScreen.IsUpText(['Attack', 'Chicken']) then
      Mouse.Click(mouse_Left);
*)
function TRSMainScreen.IsUpText(Strings: TStringArray; Timeout: Int32 = -1; Confirm: Int32 = 50): Boolean;

  function IsUpText: Boolean;
  var
    Text: String := Self.GetUpText();
    i: Int32;
  begin
    for i := 0 to High(Strings) do
      if (Strings[i] = '') or (Strings[i] in Text) then
        Exit(True);
  end;

var
  T: UInt64;
begin
  if (Timeout = -1) then
    T := GetTickCount() + Round(SRL.SkewedRand(100, 85, 200))
  else
    T := GetTickCount() + Timeout;

  while (T > GetTickCount()) do
  begin
    if IsUpText() then
    begin
      if (Confirm > 0) then
      begin
        T := GetTickCount() + Confirm;
        while (T > GetTickCount()) do
        begin
          if (not IsUpText()) then
            Exit(False);

          Wait(10);
        end;
      end;

      Exit(True);
    end;

    Wait(20, 60, wdLeft);
  end;
end;

(*
MainScreen.IsUpText; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainScreen.IsUpText(Str: String; WaitTime: UInt32 = 350): Boolean; overload;

Returns True if any of the string 'Str' is in the uptext. Will search up to 'WaitTime'
which by default is 270.

Example:

.. code-block:: pascal

    if (MainScreen.IsUpText('Attack Chicken')) then
      Mouse.Click(mouse_Left);
*)
function TRSMainScreen.IsUpText(Str: String; WaitTime: UInt32 = 350): Boolean; overload;
begin
  Result := Self.IsUpText([Str], WaitTime);
end;

(*
MainScreen.GetPlayerBox
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainScreen.GetPlayerBox(): TBox;

Returns of a rough Area (TBox) on where your player is.

Example:

.. code-block:: pascal

    Writeln(MainScreen.GetPlayerBox());
*)
function TRSMainScreen.GetPlayerBox(): TBox;
begin
  with Self.GetMiddle() do
    Result := [X - 40, Y - 40, X + 40, Y + 40];
end;

(*
MainScreen.FilterPlayerBox
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMainScreen.FilterPlayerBox(var TPA: TPointArray);

Removes all points in the TPointArray 'TPA' that are in the player box.

Example:

.. code-block:: pascal

    MainScreen.FilterPlayerBox(TPA);
*)
procedure TRSMainScreen.FilterPlayerBox(var TPA: TPointArray);
begin
  TPA := ClearTPAFromTPA(TPA, TPAFromBox(Self.GetPlayerBox()));
end;

(*
MainScreen.FindHPBars
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainScreen.FindHPBars(Area: TBox): THPBarArray;

Returns a THPBarArray of all hitpoint bars found in the area 'Area'.
  * THPBar.Bounds is the bounds of the found hitpoint bar
  * THPBar.Percent is the percent of health in the hitpoint bar.

Example:

.. code-block:: pascal

    Bars := MainScreen.FindHPBars(MainScreen.GetBounds());
*)
function TRSMainScreen.FindHPBars(Area: TBox): THPBarArray;
const
  COLOR_BARS = [$00FF00, $0000FF];
  COLOR_SPLATS = [16728128, 11339523, 5571843, 192, 197503, 65889, $FFFFFF, 0];
var
  pt: TPoint;
  i, color: Int32;
  tmp, TPA, Splats: TPointArray;
  bars: T2DIntArray;
  B: TBox;
  
  procedure _FixHPBars(TPA: TPointArray);
  var pt:TPoint;
  begin
    FilterPointsBox(TPA, 1, 0, High(bars[0]), High(bars));
    SortTPAByX(TPA, True);
    
    for pt in TPA do
      if (Bars[pt.y][pt.x-1] <> 0) then
        Bars[pt.y][pt.x] := 255;
  end;

  procedure _FindHPBars(var Result: THPBarArray);
  const
    W = 29;
    H = 4;
  var
    wid, hei, y, x, yy: Int32;
    bad: Boolean;
  begin
    wid := Length(bars[0])-W-1;
    hei := Length(bars)-5;
    for y := 1 to hei do
      for x := 1 to wid do
        if (Bars[y][x] <> 0) and (Bars[y][x+w] <> 0) then
          Bars[y][x] := 254;

    for y := 1 to hei do
      for x := 1 to wid do
        if (Bars[y][x] = 254) and ((Bars[y][x-1] = 0) or (Bars[y][x+1] = 255)) then
        begin
          bad := False;
          for yy := max(y-h,0) to y do
            if Bars[yy][x] = $00FF00 then
            begin
              bad := True;
              Break;
            end;

          if (not bad) then
          begin
            Bars[y][x] := $00FF00;
            Result += THPBar([TBox([x, y, x + W, y + H]), 0.00]);
          end;
        end;
  end;

begin
  Freeze();

  Area.LimitTo(Self.GetBounds());

  try
    for Color in COLOR_BARS do
      if (FindColors(tmp, Color, Area)) then
        TPA += tmp;

    for Color in COLOR_SPLATS do
      if (FindColors(tmp, Color, Area)) then
        Splats += tmp;

    if (Length(TPA) < 10) then
      Exit;

    B := GetTPABounds(TPA);
    OffsetTPA(Splats, Point(-B.X1+1,-B.Y1+1));
    SetLength(bars, B.Height()+2, B.Width()+2);
    
    for pt in TPA do
      bars[(pt.y-B.Y1)+1][(pt.x-B.X1)+1] := 255;
    
    _FixHPBars(Splats);
    _FindHPBars(Result);

    for i := High(Result) downto 0 do
    begin
      if (bars[Result[i].Bounds.Y1, Result[i].Bounds.X1] = 0) or
         (bars[Result[i].Bounds.Y1, Result[i].Bounds.X2] = 0) or
         (bars[Result[i].Bounds.Y2, Result[i].Bounds.X2] = 0) or
         (bars[Result[i].Bounds.Y2, Result[i].Bounds.X1] = 0) then
        Delete(Result, i, 1)
      else
        with Result[i] do
        begin
          Bounds.Offset([B.X1-1, B.Y1-1]);

          if (FindColors(TPA, $00FF00, Bounds)) then
            Percent := (GetTPABounds(TPA).Width / 30) * 100;
        end;
    end;
  finally
    Unfreeze();
  end;
end;

{
MainScreen.GetText
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TRSMainscreen.GetText(color:Int32): TMSTextArray;

Returns a TMSTextArray containing all the text (of given color) on the mainscreen.
  * TMSText.Bounds is the bounds is the textarea
  * TMSText.Text is the text it self.

Example:

.. code-block:: pascal

    msText := Mainscreen.GetText(65535);
    WriteLn(msText);

.. note:: by slacky
}
function TRSMainScreen.GetText(color:Int32): TMSTextArray;
var
  TPA: TPointArray;
  lines: T2DPointArray;
  text: String;
  b: TBox;
begin
  if FindColorsTolerance(TPA, color, self.FBounds, 0) then
    for TPA in TPA.SplitRows(7) do
    begin
      b := GetTPABounds(TPA);
      if (B.x2-B.x1+1 > 3) then
        lines += TPA;
    end;
  
  if Length(lines) = 0 then Exit;

  for TPA in ClusterTPAEx(MergeATPA(lines),10,1) do
  begin
    B := GetTPABounds(TPA);
    if (B.x2-B.x1+1 < 6) or (B.y2-B.y1+1 < 6) then
      Continue;
    B.x2 += 1;
    B.y2 := B.y1 + 13;
    text := GetTextAtEx(B, 0,3, 4, color, 0, 'UpChars07_s');
    if Length(text) > 0 then
    begin
      SetLength(Result, Length(Result) + 1);
      Result[High(Result)].Text := Text;
      Result[High(Result)].Bounds := B;
    end;
  end;
end;

procedure TRSMainScreen.SetAngle(Highest: Boolean);
begin
  if Highest then
    Keyboard.KeyDown(VK_UP)
  else
    Keyboard.KeyDown(VK_DOWN);

  Wait(1200 + Random(400));

  if Highest then
    Keyboard.KeyUp(VK_UP)
  else
    Keyboard.KeyUp(VK_DOWN);

  Wait(700 + Random(300));
end;

procedure TRSMainScreen.WaitWhileLoading(MaxWait: UInt64 = 10000);
var
  p: TPoint;
  t: UInt64;
begin
  t := GetTickCount64() + MaxWait + Random(500);
  if (srl.FindText(p, 'lease wait', 'SmallChars07', clWhite, 0, Box(0, 0, 200, 50))) then
    while (t > GetTickCount64()) and (srl.FindText(p, 'lease wait', 'SmallChars07', clWhite, 0, Box(0, 0, 200, 50))) do
      Wait(Random(200, 500));
end;

procedure TRSMainScreen.FacePoint(P: TPoint; Rand: Integer = 20; UseMouse: Boolean = True);
var
  Angle: Int32;
begin
  Angle := Round(Self.GetMiddle().AngleBetween(P));
  Angle += Random(-Rand, Rand);

  Minimap.SetCompassAngle(FixD(Angle), UseMouse);
end;

function TRSMainScreen.Find(Finder: function(): Boolean; Tries: Integer; UseMouse: Boolean = True): Boolean;
var
  Left: Boolean;
begin
  Left := Random(2) = 0;

  for 0 to Tries do
    if (Finder()) then
      Exit(True)
    else
    begin
      if Left then
        Minimap.SetCompassAngle(Minimap.GetCompassAngle() + Random(60, 190), UseMouse)
      else
        Minimap.SetCompassAngle(Minimap.GetCompassAngle() - Random(60, 190), UseMouse);

      Minimap.WaitFlag();
    end;
end;

begin
  MainScreen.__Setup();
end;
