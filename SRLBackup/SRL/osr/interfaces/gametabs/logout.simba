(*
Logout
=======
The file holds functions and procedures that are in the logout-tab.
*)

(*
type TRSLogoutWS
~~~~~~~~~~~~~~~~
Type that holds the methods for the in-game worldswitcher located on the logout tab
*)
type
  PRSLogout = ^TRSLogout;
  TRSLogoutWS = record
    FTab: PRSLogout;
    FScrollBar: TBox;
  end;

(*
type TRSLogout
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape logout-tab.
*)
  ELogoutSubTab = (lsTabNone, lsTabLogout, lsTabWorldSelect);

  TRSLogout = record(TInterfaceBase)
    btnLogout: TBox;
    WorldSwitcher: TRSLogoutWS;
  end;

{==| Table of Contents |=======================
 procedure TRSLogout.__setup();
 function TRSLogout.Open(): Boolean;
 function TRSLogout.IsOpen(): Boolean;
 function TRSLogout.ClickLogout(attempts:Int32=3; tryTime:Int32=20000): Boolean;
}

(*
var Logout
~~~~~~~~~~
Variable that stores functions and properties of the Runescape logout interface.
*)
var 
  Logout: TRSLogout;
  
{$IFNDEF CODEINSIGHT}
procedure TRSLogout.__Setup();
begin
  with Self do
  begin
    FName := 'Logout';
    FStatic := True;
    FBounds := [550,206,733,464];

    btnLogout  := [575,420,708,445];

    WorldSwitcher.FTab := PRSLogout(@Self);
    WorldSwitcher.FScrollBar := [722, 257, 735, 416];
  end;
end;
{$ENDIF}

(*
Logout.Open
~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.Open(): Boolean;

Opens the interface
*)
function TRSLogout.Open(): Boolean;
begin
  Result := Gametabs.Open(tabLogout);
end;

(*
Logout.IsOpen
~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.IsOpen(Tab:ELogoutSubtab=lsTabNone; maxWait:Int32=0): Boolean;

Checks if the interface is already open. Can also be used to check if a specific "subtab" is open.
*)
function TRSLogout.IsOpen(Tab: ELogoutSubtab = lsTabNone; maxWait: Int32 = 0): Boolean;
begin
  Result := Gametabs.IsOpen(tabLogout, maxWait);
  if (Result) and (Tab <> lsTabNone) then
    case Tab of
      lsTabWorldSelect: Result := WorldSwitcher.isOpen();
      lsTabLogout: Result := True;
    end;
end;

(*
Logout.ClickLogout
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.ClickLogout(attemts:Int32=3; tryTime:Int32=20000): Boolean;

Clicks the logout button, by default retires 3 times over 20 seconds.
*)
function TRSLogout.ClickLogout(attemts:Int32=3; tryTime:Int32=20000): Boolean;
var 
  t,seed:UInt64;
begin
  if (not Self.Open()) then
    Exit(False);
  if (WorldSwitcher.isOpen()) then
    WorldSwitcher.Close();
  
  seed := 3153;
  Inc(tryTime, attemts * seed div 2);
  for 1 to attemts do
  begin
    mouse.click(Self.BtnLogout, mouse_left);
    t := GetTickCount64() + (tryTime div attemts);
    repeat
      if (CountColorTolerance(1777019, Self.BtnLogout, 30) < 100) then
        Exit(True)
      else
        Wait(25);
    until GetTickCount64() > t;
    Wait(0,seed);
  end;
end;

(*
Logout.SwitchToWorld
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.SwitchToWorld(World: Integer): Boolean;

Jumps to the given world.
*)
function TRSLogout.SwitchToWorld(World: Integer): Boolean;
begin
  Result := Self.WorldSwitcher.SwitchTo(World);
end;

(*
Logout.WorldSwitcher.GetCurrentWorld
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSLogoutWS.GetCurrentWorld: Int32;

Reads and returns the current world.
*)
function TRSLogoutWS.GetCurrentWorld: Int32;
const
  CURRENT_WORLD_COLOR = $1F98FF;
  CURRENT_WORLD_BOUNDS: TBox = [555, 206, 714, 226];
var
  Numbers: TExtendedArray;
begin
  Result := -1;

  if FTab^.Open() then
  begin
    Numbers := OCR.SimpleRecognize(CURRENT_WORLD_BOUNDS, CURRENT_WORLD_COLOR, UpFont).ExtractNumbers();
    if Length(Numbers) > 0 then
      Result := Round(Numbers[0]);
  end;
end;

function TRSLogoutWS.IsCurrentWorld(World: Int32; WaitTime: Int32): Boolean; overload;
var
  T: UInt64;
begin
  T := GetTickCount() + WaitTime;
  while (T > GetTickCount()) do
  begin
    if Self.GetCurrentWorld() = World then
      Exit(True);

    Wait(Random(50, 100));
  end;
end;

(*
Logout.WorldSwitcher.isOpen
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogoutWS.isOpen: Boolean;
  function TRSLogoutWS.IsOpen(WaitTime: Int32): Boolean; overload;

Returns if the in-game worldswitcher is open. Optional overload to wait
up to `WaitTime` for worldswitcher to be open.
*)
function TRSLogoutWS.IsOpen: Boolean; overload;
begin
  Result := Self.GetCurrentWorld() > 0;
end;

function TRSLogoutWS.IsOpen(WaitTime: Int32): Boolean; overload;
var
  T: UInt64 := GetTickCount() + WaitTime;
begin
  while (T > GetTickCount()) do
  begin
    if Self.GetCurrentWorld() > 0 then
      Exit(True);

    Wait(50);
  end;
end;

(*
Logout.WorldSwitcher.Open
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogoutWS.Open: Boolean;

Opens the in-game worldswitcher
*)
function TRSLogoutWS.Open: Boolean;
const
  WORLD_SWITCHER_BUTTON: TBox = [573, 372, 708, 396];
begin
  if Self.IsOpen() then
    Exit(True);

  Mouse.Click(WORLD_SWITCHER_BUTTON, MOUSE_LEFT);
  if Self.IsOpen(Random(2500, 3000)) then
    Exit(True);
end;

(*
Logout.WorldSwitcher.Close
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogoutWS.Close: Boolean;

Closes the worldswitcher (returns back to the logout button)
*)
function TRSLogoutWS.Close: Boolean;
var
  t: UInt64;
begin
  if (not Self.isOpen()) then
    Exit(True);
  Mouse.Click(Box(715, 206, 735, 226), mouse_Left);

  t := GetTickCount64() + Random(4000, 5000);
  while (t > GetTickCount64()) do
    if (not Self.isOpen()) then
      Exit(True)
    else
      Wait(Random(50, 100));
end;

(*
Logout.WorldSwitcher.ClickWorld
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSLogoutWS.ClickWorld(World, WorldColor: Int32): Boolean;

Attempts to click a world [Using a simple bitmap search].
*)
function TRSLogoutWS.ClickWorld(World: Int32): Boolean;
const
  WORLD_WIDTH = 145;
  WORLD_HEIGHT = 12;
  WORLD_FONT = 'SmallChars07';
  WORLD_COLORS: TIntegerArray = [$00F0F0, $E0E0E0]; // Members, Free
var
  Color: Int32;
  BMP: TMufasaBitmap;
  B: TBox;
begin
  for Color in WORLD_COLORS do
  try
    BMP := GetMufasaBitmap(BitmapFromText(ToString(World), WORLD_FONT));
    BMP.ReplaceColor($FFFFFF, Color);

    if FindBitmapIn(BMP.GetIndex(), B.X1, B.Y1, Self.FTab^.GetBounds().Expand(1)) then
    begin
      Mouse.Click(Box(B.X1, B.Y1, B.X1 + WORLD_WIDTH, B.Y1 + WORLD_HEIGHT), MOUSE_LEFT);

      Exit(True);
    end;
  finally
    BMP.Free();
  end;
end;

(*
Logout.WorldSwitcher.Scroll
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSLogoutWS.Scroll(Down: Boolean): Boolean;

    Returns true if world-switcher was scrolled [By checking for pixelshift].
*)
function TRSLogoutWS.Scroll(Down: Boolean): Boolean;

  function Screenshot: TIntegerArray;
  begin
    Result := GetColors(TPAFromBox(Self.FTab^.GetBounds()));
  end;

var
  Colors: TIntegerArray;
begin
  Colors := Screenshot();

  for 1 to Random(2, 3) do
  begin
    Mouse.Scroll(FScrollBar, Random(1, 2), Down);

    if Random() < 0.70 then
      Wait(50, 100, wdLeft)
    else
      Wait(50, 1000, wdLeft);

    if not Screenshot().Equals(Colors) then
      Exit(True);
  end;
end;

(*
Logout.WorldSwitcher.SwitchTo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSLogoutWS.SwitchTo(World: Int32): Boolean;

Uses the in-game world switcher to switch to `World`. Returns true if succesfully
switched [By reading current world].

**Example**

.. pascal::
  if Logout.WorldSwitcher.SwitchTo(302) then
    WriteLn('Switched to world 302');
*)
function TRSLogoutWS.SwitchTo(World: Int32): Boolean;

  function Click(Direction: Boolean): Boolean;
  begin
    repeat
      if Self.ClickWorld(World) then
        Exit(True);
    until (not Self.Scroll(Direction));
  end;


var
  Direction, Clicked: Boolean;
  T: UInt64;
begin
  if (not Self.Open()) then
    Exit(False);

  Direction := SRL.Dice(50);

  if Click(Direction) or Click(not Direction) then
  begin
    T := GetTickCount() + Round(SRL.TruncatedGauss(10000, 15000));
    while (T > GetTickCount()) do
    begin
      if not Clicked then
        Clicked := Chatbox.ClickOption(['Yes.'], Random(1500, 2000));
      if Self.GetCurrentWorld() = World then
        Exit(True);

      Wait(100, 1000, wdLeft);
    end;
  end;
end;

begin
  Logout.__Setup();
end;
