(*
Options
=======
The options file holds functions and procedures that are used for configuring runescape.

Keep in mind that the option-tab changes qute frequently in OSRS, so over time it's more likely
to get outdated.
*)

(*
type TRSOptions
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape options interface.
*)   
type 
  TRSOptions = record(TInterfaceBase)
    FTabs: TBoxArray;
    FZoomSliderBox: TBox;
  end;

{==| Table of Contents |=======================
 procedure TRSOptions.__setup();
 function TRSOptions.Open(): Boolean;
 function TRSOptions.IsOpen(): Boolean;
 function TRSOptions.GetCurrentTab(): EOptionsTab;
 function TRSOptions.SetCurrentTab(tab: EOptionsTab; tryTime:Int32=2000): Boolean;
 function TRSOptions.GetBrightness(): Int32;
 function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleOrbs(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRoofRemoval(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRemainingXP(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;
}

(*
var Options
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape options interface.
*)
var 
  Options: TRSOptions;


(*
type EOptionsTab
~~~~~~~~~~~~~~~~
A type that covers the internal tabs in TRSOptions: ``EOptionsTab = (optDisplay, optAudio, optChat, optControls)``
*)
type
  EOptionsTab = (optDisplay, optAudio, optChat, optControls);

  
{$IFNDEF CODEINSIGHT}
procedure TRSOptions.__setup();
begin
  Self.FBounds := [550,206,733,464];
  
  with Self do
  begin
    FName := 'Options';
    FStatic := True;
    FZoomSliderBox := [608, 268, 704, 277];
  end;

  //the four tabs (Display, Audio, Chat, Controls)
  SetLength(Self.FTabs, 4);
  Self.FTabs[0] := [553,206,592,245];
  Self.FTabs[1] := [599,206,638,245];
  Self.FTabs[2] := [645,206,684,245];
  Self.FTabs[3] := [691,206,730,245];
end;
{$ENDIF}

(*
Options.Open
~~~~~~~~~~~~~
.. pascal:: function TRSOptions.Open(): Boolean;

Opens the interface
*)
function TRSOptions.Open(): Boolean;
begin
  Result := Gametabs.Open(tabOptions);
end;

(*
Options.IsOpen
~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.IsOpen(maxWait:Int32=0): Boolean;

Checks if the interface is already open.
*)
function TRSOptions.IsOpen(maxWait:Int32=0): Boolean;
begin
  Result := Gametabs.IsOpen(tabOptions, maxWait);
end;


//helper: Changes tab, and toggles the given button returns True if it didn't fail
function TRSOptions.__toggleButton(button:TBox; tab:EOptionsTab; enable:Boolean; tryTime:Int32): Boolean;
var enabled:Boolean;
begin
  if not(self.SetCurrentTab(tab)) then
    Exit(False);
  if GtButton(button).IsEnabled() = enable then
    Result := True
  else
    Result := GtButton(button).Toggle(enabled, tryTime);
end;


(*
Options.GetCurrentTab
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetCurrentTab(): EOptionsTab;

Returns which tab is currently active.
*)
function TRSOptions.GetCurrentTab(): EOptionsTab;
var i:Int32;
begin
  if not(self.Open()) then
    Exit();

  for i:=0 to High(FTabs) do
    if GtButton(FTabs[i]).IsEnabled() then
      Exit(EOptionsTab(i));
end;

(*
Options.SetCurrentTab
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetCurrentTab(Tab: EOptionsTab; tryTime:Int32=2000): Boolean;

Sets the current tab to the given ``Tab``
*)
function TRSOptions.SetCurrentTab(tab: EOptionsTab; tryTime:Int32=2000): Boolean;
var
  t:UInt64;
  wasOpen:Boolean;
begin
  wasOpen := self.IsOpen();
  if not(self.Open()) then 
    Exit();
  if not(wasOpen) then
    Wait(20,300);

  if Self.GetCurrentTab() = tab then Exit(True);

  Mouse.Click(Self.FTabs[Ord(tab)], mouse_left);
  t := GetTickCount64()+tryTime;
  repeat
    if GtButton(FTabs[Ord(tab)]).IsEnabled() then
      Exit(True)
    else
      Wait(25);
  until GetTickCount64() > t;
end;

(*
Options.GetBrightness
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetBrightness(): Int32;

Returns the mainscreen brightness
*)
function TRSOptions.GetBrightness(): Int32;
var
  x,y:Int32;
  range:TBox = [609,298,718,316];
begin
  if not(self.SetCurrentTab(optDisplay)) then
    Exit(-1);
  if not(FindColorTolerance(x,y, 9584920, range, 35)) then
    Exit(-1);
  Result := Round((x - range.x1)/(range.x2-range.x1+1)*3);
end;


(*
Options.SetBrightness
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;

Sets the mainscreen brightness
*)
function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;
var
  t:UInt64;
  spacing:Int32=31;
  range:TBox = [609,298,718,316];
begin
  if not(self.SetCurrentTab(optDisplay)) or not(InRange(level, 0,3)) then
    Exit(False);

  if (self.GetBrightness() = level) then
    Exit(True);

  with range do
    Mouse.Click(TBox([x1+spacing*level,y1,x1+spacing*level+12,y2]), mouse_left);

  t := GetTickCount64()+tryTime;
  repeat
    if self.GetBrightness() = level then
      Exit(True)
    else
      Wait(25);
  until GetTickCount64() > t;
end;

(*
type ERSZoomNotch
~~~~~~~~~~~~~~~~~
  Zoom level notches.

  ZOOM_LEVEL_0 = Zoomed out fully.
  ZOOM_LEVEL_50 = Default.
  ZOOM_LEVEL_100 = Zoomed in fully.
*)
type
  ERSZoomNotch = (ZOOM_NOTCH_UNKNOWN, ZOOM_NOTCH_0, ZOOM_NOTCH_25, ZOOM_NOTCH_50, ZOOM_NOTCH_75, ZOOM_NOTCH_100);

const
  ZOOM_NOTCH_DEFAULT = ZOOM_NOTCH_50;

(*
Options.FindZoomSlider
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.FindZoomSlider(out P: TPoint): Boolean;

Returns the middle of the green zoom slider.
*)
function TRSOptions.FindZoomSlider(out P: TPoint): Boolean;
var
  TPA: TPointArray;
begin
  if Self.SetCurrentTab(optDisplay) and (SRL.FindColors(TPA, CTS0(2106152), FZoomSliderBox.Expand(10)) > 0) then
  begin
    P := TPA.Mean();

    Exit(True);
  end;
end;

(*
Options.GetZoom
~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetZoom: Int32;

Returns the current zoom level in 0..100 range. -1 if not found.
*)
function TRSOptions.GetZoom: Int32;
var
  Slider: TPoint;
begin
  if (not Self.FindZoomSlider(Slider)) then
    Exit(-1);

  Result := Round((Slider.X - FZoomSliderBox.X1) * 100 / (FZoomSliderBox.Width - 1));
end;

(*
Options.SetZoom
~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetZoom(Level: Int32): Boolean;

Sets the current zoom level by using the slider. 0..100 range.
*)
function TRSOptions.SetZoom(Level: Int32): Boolean;
var
  Destination, Slider, P: TPoint;
  T: UInt64;
begin
  if (not Self.SetCurrentTab(optDisplay)) or (not Self.FindZoomSlider(Slider)) then
    Exit(False);

  Destination.X := FZoomSliderBox.X1 + Round((Level * (Options.FZoomSliderBox.Width - 1) / 100));
  Destination.Y := Random(FZoomSliderBox.Y1, FZoomSliderBox.Y1);

  // Normalize our level. The bar only 96 pixels wide
  Level := Round((Destination.X - FZoomSliderBox.X1) * 100 / (FZoomSliderBox.Width - 1));
  if (Self.GetZoom() = Level) then
    Exit(True);

  Destination.X := Destination.X + 1;

  // Cant click on the slider, move out of the way.
  if Distance(Destination, Slider) <= 10 then
  begin
    P := [Random(FZoomSliderBox.X1, FZoomSliderBox.X2), Random(FZoomSliderBox.Y1, FZoomSliderBox.Y2)];
    while Distance(P, Destination) <= 10 do
      P := [Random(FZoomSliderBox.X1, FZoomSliderBox.X2), Random(FZoomSliderBox.Y1, FZoomSliderBox.Y2)];

    Mouse.Click(P, MOUSE_LEFT);

    Wait(0, 2000, wdLeft);
  end;

  Mouse.Click(Destination, MOUSE_LEFT);

  T := GetTickCount() + 1000;
  while (T > GetTickCount()) do
  begin
    if (Self.GetZoom() = Level) then
      Exit(True);

    Wait(Random(50, 100));
  end;
end;

(*
Options.GetZoomNotch
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetZoomNotch: ERSZoomNotch;

Returns the current zoom notch. ZOOM_NOTCH_UNKNOWN if not either 0,25,50,75,100.
*)
function TRSOptions.GetZoomNotch: ERSZoomNotch;
begin
  case Self.GetZoom() of
    100: Result := ZOOM_NOTCH_100;
    75:  Result := ZOOM_NOTCH_75;
    50:  Result := ZOOM_NOTCH_50;
    20:  Result := ZOOM_NOTCH_25;
    0:   Result := ZOOM_NOTCH_0;
  end;
end;

(*
Options.SetZoomNotch
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetZoomNotch(Notch: ERSZoomNotch): Boolean;

Moves the zoom slider to the `Notch` position.
*)
function TRSOptions.SetZoomNotch(Notch: ERSZoomNotch): Boolean;
begin
  case Notch of
    ZOOM_NOTCH_100: Result := Self.SetZoom(100);
    ZOOM_NOTCH_75:  Result := Self.SetZoom(75);
    ZOOM_NOTCH_50:  Result := Self.SetZoom(50);
    ZOOM_NOTCH_25:  Result := Self.SetZoom(20);
    ZOOM_NOTCH_0:   Result := Self.SetZoom(0);
  end;
end;

(*
Options.ToggleAcceptAid
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;
var
  enabled:Boolean;
  button:TBox = [555,425,590,464];
begin
  if not self.Open() then Exit(False);
  if GtButton(button).IsEnabled() = enable then
    Result := True
  else
    Result := GtButton(button).Toggle(enabled, tryTime);
end;

(*
Options.ToggleRun
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;
var
  enabled:Boolean;
  button:TBox = [600,425,635,464];
begin
  if not self.Open() then Exit(False);
  if GtButton(button).IsEnabled() = enable then
    Result := True
  else
    Result := GtButton(button).Toggle(enabled, tryTime);
end;


(*
Options.ToggleChatEffects
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([568,268,602,305], optChat, enable, tryTime);
end;

(*
Options.ToggleSplitPrivChat
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([625,268,658,305], optChat, enable, tryTime);
end;


(*
Options.ToggleProfanityFilter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([568,322,603,358], optChat, enable, tryTime);
end;

(*
Options.ToggleTimeoutNotice
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button for "Login/Logout notification timeout" to the given state.
*)
function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([680,322,716,358], optChat, enable, tryTime);
end;

(*
Options.ToggleShiftDrop
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.ToggleShiftDrop(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button for "Shift Drop" to the given state.
*)
function TRSOptions.ToggleShiftDrop(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([595,299,630,334], optControls, enable, tryTime);
end;


begin
  Options.__setup();
end;
