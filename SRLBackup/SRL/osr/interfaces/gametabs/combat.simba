(*
Combat
=======
The combat file holds functions and procedures that are used for configuring combat.
*)

(*
type TRSCombat
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape combat interface.
*)  
type 
  TRSCombat = record(TInterfaceBase)
    FButtons: TBoxArray;
  end;

{==| Table of Contents |=======================
 procedure TRSCombat.__setup();
 function TRSCombat.Open(): Boolean;
 function TRSCombat.IsOpen(): Boolean;
 function TRSCombat.ToggleButton(btn: ECombatStyle; enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSCombat.GetCombatLevel(): Int32;
 function TRSCombat.GetWeapon(): String;
}

(*
var Combat
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape combat interface.
*)
var 
  Combat: TRSCombat;

(*
type ECombatStyle
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  ECombatStyle = (cbtAccurate, cbtAggressive, cbtControlled, cbtDefensive, cbtRetaliate);

identifiers that is used for pressing the different buttons in the combat interface
*) 
type
  ECombatStyle = (
    cbtAccurate, 
    cbtAggressive, 
    cbtControlled, 
    cbtDefensive, 
    cbtRetaliate,
    cbtSpecialAttack
  );
  
{$IFNDEF CODEINSIGHT}
procedure TRSCombat.__Setup();
begin
  with Self do
  begin
    FName := 'Combat';
    FStatic := True;
    FBounds := [548,206,735,464];
    FButtons := [
      [568,251,635,294], //accurate
      [654,254,717,292], //aggressive
      [568,305,635,347], //controlled
      [652,305,719,347], //defensive
      [568,358,719,401], //retaliate
      [568,414,715,431]  //spec
    ];
  end;
end;

procedure TRSCombat.Debug();
var
  BMP: TMufasaBitmap;
begin
  BMP := GetMufasaBitmap( BitmapFromClient(SRL.DefaultClientBounds) );
  BMP.DrawBoxes(Self.FButtons, False, $0000FF);
  BMP.DrawBox(FBounds, False, $00FF00);
  BMP.Debug();
  BMP.Free();
end;
{$ENDIF}

(*
Combat.Open
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSCombat.Open(): Boolean;

Opens the interface
*)
function TRSCombat.Open(): Boolean;
begin
  Result := Gametabs.Open(tabCombat);
end;

(*
Combat.IsOpen
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSCombat.IsOpen(maxWait:Int32=0): Boolean;

Checks if the interface is already open.
*)
function TRSCombat.IsOpen(maxWait:Int32=0): Boolean;
begin
  Result := Gametabs.IsOpen(tabCombat, maxWait);
end;

(*
Combat.ToggleButton
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSCombat.ToggleButton(btn: ECombatStyle; enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the given button ``btn`` (if needed) to the given state ``enable``.
*)
function TRSCombat.ToggleButton(btn: ECombatStyle; enable:Boolean; tryTime:Int32=2000): Boolean;
var 
  state:boolean;
  t:UInt64;
begin
  if not(self.Open()) then
    Exit(False);
  
  state := CountColorTolerance(1777019, Self.FButtons[ord(btn)], 30) > 100;
  if state = enable then
    Exit(True);
  
  mouse.click(Self.FButtons[ord(btn)], mouse_left);
  t := GetTickCount64()+tryTime;
  repeat
    if (CountColorTolerance(1777019, Self.FButtons[ord(btn)], 30) > 100) = enable then
      Exit(True)
    else
      Wait(25);
  until GetTickCount64() > t;
end;

(*
Combat.GetCombatLevel
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSCombat.GetCombatLevel(): Int32;

Returns your combat-level.
*)
function TRSCombat.GetCombatLevel(): Int32;
var text:String;
begin
  if not(self.Open()) then
    Exit(-1);
  text := ocr.Recognize(TBox([602,230,700,245]), TCompareRules([2070783]), StatFont);
  Result := StrToIntDef(ExtractFromStr(text, Numbers),-1);
end;

(*
Combat.GetWeapon
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSCombat.GetWeapon(): String;

Returns the currently equipped weapon.
*)
function TRSCombat.GetWeapon(): String;
begin
  if not(self.Open()) then
    Exit('');
  OCR.SetFont(NPCFont);
  with Self.FBounds do
    Result := ocr.Recognize(TBox([x1,212,x2,230]), TCompareRules([2070783]), 70);
end;

(*
Combat.GetSpecialAttack
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSCombat.GetSpecialAttack(): Int32;

Returns the specual attack level
*)
function TRSCombat.GetSpecialAttack(): Int32;
var
  Text: String;
  TPA: TPointArray;
  b: TBox;
  color: Int32;
begin
  if (not Self.Open()) then
    Exit(-1);
  
  for color in [$100000, $00FFFF] do
    if (FindColors(TPA, color, Self.FButtons[cbtSpecialAttack])) then
    begin
      b := GetTPABounds(TPA).Expand(1);
      Text := ocr.Recognize(b, TCompareRules([color]), StatFont);
      Exit(StrToIntDef(ExtractFromStr(Text, Numbers), -1));
    end;
end;

(*
Combat.SpecialAttackEnabled
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSCombat.SpecialAttackEnabled(): Boolean;

Returns ``True`` if special attack has been activated
*)
function TRSCombat.SpecialAttackEnabled(): Boolean;
var
  x, y: Int32;
begin
  if (not Self.Open()) then
    Exit(False);
  Result := FindColor(x, y, 65535, Self.FButtons[cbtSpecialAttack]);
end;

(*
Combat.UseSpecialAttack
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSCombat.UseSpecialAttack(): Boolean;

Attempts to enabled special attack, returns ``True`` if it managed to, or if it was already enabled.
*)
function TRSCombat.UseSpecialAttack(): Boolean;
begin
  if (not Self.Open()) then
    Exit(False);
  
  Result := Self.SpecialAttackEnabled();
  if (not Result) then
  begin
    Mouse.Click(Self.FButtons[cbtSpecialAttack], mouse_Left);
    Result := True;
  end;
end;

begin
  combat.__setup();
end;
