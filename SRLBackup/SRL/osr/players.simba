(*
Players
=======

This file holds functions and procedures that manage and handle an array of players.

 * Stores a global variable ``players`` that all players should be added to (see below).

.. code-block:: pascal

    procedure DeclarePlayers();
    begin
      with Players.New()^ do
      begin
        LoginName := 'username';
        Password  := 'password';
        BankPin   := 'pin';
        isActive  := True;
      end;

      with Players.New()^ do
      begin
        LoginName := 'username2';
        Password  := 'password2';
        BankPin   := 'pin2';
        isActive  := True;
        World     := 2; // This player will be logged into world 2
      end;
    end;
*)

type
  TPlayerArray = record
    FPlayers: array of TPlayer;
    FCurrent: Integer;
  end;

var
  Players: TPlayerArray;

(*
TPlayerArray.SetCount
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayerArray.SetCount(Number: Integer);

Sets the amount of players to be stored in the array.

Example:

.. code-block:: pascal

    Players.SetCount(1);
*)
procedure TPlayerArray.SetCount(Number: Integer);
begin
  SetLength(FPlayers, Number);
end;

(*
TPlayerArray.GetCount
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.GetCount(): Integer;

Returns the amount of players stored in the array.

Example:

.. code-block:: pascal

    srl.Writeln(Players.GetCount());
*)
function TPlayerArray.GetCount(): Integer;
begin
  Result := Length(FPlayers);
end;

(*
TPlayerArray.GetCurrent
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.GetCurrent(): TPlayer;

Returns a pointer to the currently used player.
- Derefrence "Players.GetCurrent()^" to get a TPlayer

Example:

.. code-block:: pascal

    srl.Writeln(Players.GetCurrent()^.LoginName);
    Players.GetCurrent()^.isActive := False;
*)
function TPlayerArray.GetCurrent(): PPlayer;
begin
  if (InRange(FCurrent, Low(FPlayers), High(FPlayers))) then
    Result := @FPlayers[FCurrent]
  else
    srl.Writeln('Players.GetCurrent: No current player set', dtFatal);
end;

(*
TPlayerArray.SetCurrent
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayerArray.SetCurrent(idx: Integer);

Sets the player to be currently used.

Example:

.. code-block:: pascal

    Players.SetCurrent(1);
*)
procedure TPlayerArray.SetCurrent(idx: Integer);
begin
  FCurrent := idx;
end;

(*
TPlayerArray.GetActive
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.GetActive(): Integer;

Returns the amount of current active players.

Example:

.. code-block:: pascal

    srl.Writeln(Players.GetActive());
*)
function TPlayerArray.GetActive(): Integer;
var
  i: Integer;
begin
  Result := 0;
  for i := 0 to High(Self.FPlayers) do
    if (Self.FPlayers[i].isActive) then
      Inc(Result);
end;

(*
TPlayerArray.GetPlayer
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.GetPlayer(idx: Integer): TPlayer;

Returns the player in the index 'idx'.

Example:

.. code-block:: pascal

    srl.Writeln(Players.GetPlayer(0).LoginName);
*)
function TPlayerArray.GetPlayer(idx: Integer): TPlayer;
begin
  Result := FPlayers[idx];
end;

(*
TPlayerArray.SwitchTo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.SwitchTo(Index: Integer): Boolean;

 - Logs out the current player
 - Sets the current player as in-active and sets the new player as active
 - Logs in the new (now current) player

Example:

.. code-block:: pascal

    Players.SwitchTo(1);
*)
function TPlayerArray.SwitchTo(Index: Integer): Boolean;
var
  curr: TPlayer;
begin
  srl.Writeln('TPlayerArray.SwitchTo: Switching current player to: ' + IntToStr(Index));

  Self.SetCurrent(Index);

  curr := Self.GetCurrent()^;
  curr.isActive := True;

  if (srl.isLoggedIn()) and (not Logout.ClickLogout()) then
    Exit(srl.Writeln('TPlayerArray.SwitchTo: Failed to logout current player', False));
  if (not curr.Login()) then
    Exit(srl.Writeln('Failed to login new player', False));

  Result := True;
end;

(*
TPlayerArray.Next
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.Next(): Boolean;

Switches and logs in the next player, will terminate the script if no active players exist.

Example:

.. code-block:: pascal

    if (Players.Next()) then
      srl.Writeln('Succesfully switched and logged in our next player');
*)
function TPlayerArray.Next: Boolean;
var
  i, next: UInt32;
begin
  next := FCurrent;
  for i := 0 to Self.GetCount() - 1 do
  begin
    next += 1;
    if (next >= Self.GetCount()) then next := 0;
    if Self.FPlayers[next].isActive then
    begin
      Result := Self.SwitchTo(next);
      if not Result then Continue else Exit(True);
    end;
  end;

  srl.Writeln('TPlayerArray.Next: No active players to switch to', dtFatal);
end;

(*
TPlayerArray.Add
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayerArray.Add(Player: TPlayer);

Adds the player 'Player' into the player array.

Example:

.. code-block:: pascal

    Players.Add(['login', 'password', '1234', True, True]);
*)
procedure TPlayerArray.Add(Player: TPlayer);
var
  c: UInt32;
begin
  c := Self.GetCount();
  Self.SetCount(c + 1);
  Self.FPlayers[c] := Player;
end;

(*
TPlayerArray.New
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.New(): PPlayer;

Creates and results a new player.

*)
function TPlayerArray.New(): PPlayer;
var
  c: UInt32;
begin
  c := Self.GetCount();
  Self.SetCount(c + 1);

  Result := @Self.FPlayers[c];
  Result^.WorldFilter := DEFAULT_WORLD_FILTER;
end;

(*
TPlayerArray.LoginCurrent
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.LoginCurrent(): Boolean;

Logs in the currently active player.

*)
function TPlayerArray.LoginCurrent(): Boolean;
begin
  Result := FPlayers[FCurrent].Login();
end;
