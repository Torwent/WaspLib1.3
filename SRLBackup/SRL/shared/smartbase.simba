{$loadlib libsmartremote}

type
  TSmartParameters = record
    Root: String;
    Param: String;
    UserAgent: String;
    InitSeq: String;
    Plugins: TStringArray;
  end;

  TSmartSpawnEvent = function(var Params: TSmartParameters): Boolean of object;
  TSmartFreeEvent = procedure of object;

  TSmartBase = record
    Parameters: TSmartParameters;
    JavaPath: String;
    Width, Height: Int32;
    Image: TMufasaBitmap;
    Target: PtrUInt;
    PID: UInt32;
    ForceSpawn: Boolean;
    ShowConsole: Boolean;
    EnableDrawing: Boolean; // not used anymore.
    OnSpawn: TSmartSpawnEvent;
    OnFree: TSmartFreeEvent;
  end;

procedure TSmartBase.SetDebug(Enable: Boolean);
begin
  SmartSetDebug(Self.Target, Enable);
end;

procedure TSmartBase.SetEnabled(Enable: Boolean);
begin
  SmartSetEnabled(Self.Target, Enable);
end;

function TSmartBase.GetEnabled: Boolean;
begin
  Result := SmartEnabled(Self.Target);
end;

function TSmartBase.SetTarget: Boolean;
begin
  try
    Result := SetEIOSTarget('libsmartremote', IntToStr(Self.PID)) > 0;
  except
    srl.WriteLn('[SMART]: EIOS target failed');
  end;
end;

function TSmartBase.CreateClient: Boolean;

  {$IFDEF SIMBAMAJOR1200}
  function FindJava(Path: String): TStringArray;
  var
    Directory, Java: String;
  begin
    for Directory in GetDirectories(Path) do
    begin
      Java := StringReplace(Path + Directory, '\', '/', [rfReplaceAll]);
      Java := Java + '/bin/java.exe';

      if FileExists(Java) then
        Result := Result + Java;
    end;
  end;
  {$ENDIF}

var
  Files: TStringArray;
  i: Int32;
  Drive: String;
begin
  {$IFDEF WINDOWS}
  if Self.JavaPath = '' then
  begin
    {$IFDEF SIMBAMAJOR1200}
      {$IFDEF CPU386}
      Files := FindJava('C:\Program Files (x86)\Java\') +
               FindJava('E:\Program Files (x86)\Java\');
      {$ELSE}
      Files := FindJava('C:\Program Files\Java\') +
               FindJava('E:\Program Files\Java\');
      {$ENDIF}
    {$ELSE}
      for i := Ord('A') to Ord('Z') do
      begin
        Drive := Char(i) + ':\';
        if DirectoryExists(Drive) then
          Files := Files + FindFile(Drive + 'Program Files (x86)\Java\', 'java.exe') +
                           FindFile(Drive + 'Program Files\Java\', 'java.exe');
      end;
  {$ENDIF}
    if Length(Files) > 0  then
      Self.JavaPath := Files[0];
  end;
  {$ENDIF}

  if Self.JavaPath = '' then
  begin
    srl.WriteLn('[SMART]: Unable to find java path.');
    srl.WriteLn('[SMART]: Java path is set with `Smart.JavaPath := ' + #39 + 'path/to/java.exe' + #39 + '`');
    srl.WriteLn('[SMART]: Make sure Java matches Simba''s bitness. (' + {$IFDEF CPU32}'32'{$ELSE}'64'{$ENDIF} ' bit)');

    Exit(False);
  end;

  if (@Self.OnSpawn <> nil) and (not Self.OnSpawn(Self.Parameters)) then
  begin
    srl.WriteLn('[SMART]: Cannot spawn client: parameters failed');

    Exit(False);
  end;

  {$IFDEF WINDOWS}
  if not Self.ShowConsole then
  begin
    JavaPath := StringReplace(Self.JavaPath, 'java.exe', 'javaw.exe', [])
  end;
  {$ENDIF}

  with Self.Parameters do
  begin
    srl.WriteLn('[SMART]: Java: ' + Self.JavaPath);
    srl.WriteLn('[SMART]: Root: ' + Root);
    srl.WriteLn('[SMART]: Param: ' + Param);
    srl.WriteLn('[SMART]: Plugins: ' + ToString(Plugins));

    Self.Target := SmartSpawnClient(JavaPath, StringReplace(PluginPath, '\', '/', [rfReplaceAll]), Root, Param, Width, Height, InitSeq, UserAgent, '', Implode(',', Plugins));
  end;

  if (Self.Target = 0) then
  begin
    srl.WriteLn('[SMART]: Error spawning client. Check Simba''s console for more infomation.');

    Exit(False);
  end;

  Self.PID := SmartGetClientPID(Self.Target);

  if Self.SetTarget() then
  begin
    srl.WriteLn('[SMART]: Created SMART[' + ToString(Self.PID) + ']');

    Exit(True);
  end else
  begin
    srl.WriteLn('[SMART]: Error targeting SMART');

    SmartFreeClient(Self.Target);
  end;
end;

function TSmartBase.PairToExisting: Boolean;
var
  i: Int32;
begin
  for i := 0 to SmartGetClients(True) - 1 do
  begin
    Self.Target := SmartPairClient(SmartGetAvailablePID(i));
    Self.PID := SmartGetAvailablePID(i);

    if (Self.Target > 0) and Self.SetTarget() then
    begin
      srl.WriteLn('[SMART]: Paired to existing client');

      Exit(True);
    end else
      SmartFreeClient(Self.Target);
  end;

  SRL.WriteLn('[SMART]: No free clients');
end;

function TSmartBase.Reload(Delay: Int32 = 0): Boolean;
var
  Force: Boolean := Self.ForceSpawn;
  Copy: TMufasaBitmap := Self.Image.Copy();
begin
  Self.ForceSpawn := True;
  Self.Free(True);

  if (Delay > 0) then
    Wait(Delay);

  Result := Self.Init();
  if Result then
    Copy.DrawTransparent(0, 0, Self.Image)
  else
    SRL.Writeln('[SMART]: Failed to reload');

  Self.ForceSpawn := Force;
  Copy.Free();
end;

procedure TSmartBase.Free(Kill: Boolean); overload;
begin
  if (@OnFree <> nil) then
    OnFree();

  Self.Image.Free();
  Self.Image := nil;

  if (Self.Target > 0) then
  begin
    srl.WriteFmt('[SMART]: Freeing SMART[%d]', [Self.PID]);

    SmartFreeClient(Self.Target);
    if Kill then
      SmartKillClient(Self.PID);
  end;

  Self.Target := 0;
  Self.PID := 0;
end;

procedure TSmartBase.Free; overload;
begin
  Self.Free(False);
end;

function TSmartBase.Init: Boolean;
begin
  AddOnTerminate(@Self.Free);

  if Self.ForceSpawn then
    Result := Self.CreateClient()
  else
  begin
    Result := Self.PairToExisting();
    if (not Result) then
      Result := Self.CreateClient()
  end;

  if Result then
  begin
    Self.Image.Init(Client.getMBitmaps());

    with Self.Image do
    begin
      SetName(Format('Smart[%d] Image', [Self.PID]));
      SetSize(Width, Height);
      SetPersistentMemory(SmartDebugArray(Self.Target), Self.Width, Self.Height);
      DrawClear($000000);
    end;

    Self.SetDebug(True);
    Self.SetEnabled(True);
  end;
end;
