(*
Color
======
Color finding related methods
*)
type
  TCTSColor = record
    Color: Integer;
    Tolerance: Integer;
  end;

  TCTS1Color = type TCTSColor;

  TCTS2Color = record(TCTS1Color)
    HueMod, SatMod: Extended;
  end;

(*
CTS0, CTS1, CTS2
~~~~~~~~~~~~~~~~
.. pascal::
  function CTS0(Color, Tolerance: Int32): TCTSColor;
  function CTS1(Color, Tolerance: Int32): TCTS1Color;
  function CTS2(Color, Tolerance: Int32; HueMod:Extended=0.2; SatMod:Extended=0.2): TCTS2Color;
  
Used for declaring colors using the different CTS settings.
*)
function CTS0(Color: Int32; Tolerance: Int32 = 0): TCTSColor;
begin
  Result := [Color, Tolerance];
end;

function CTS1(Color, Tolerance: Int32): TCTS1Color;
begin
  Result := [Color, Tolerance];
end;

function CTS2(Color, Tolerance: Int32; HueMod:Extended=0.2; SatMod:Extended=0.2): TCTS2Color;
begin
  Result := [Color, Tolerance, HueMod, SatMod];
end;


// -----------------------------------------------------------------------------
// Find Colors

function TSRL._FindColors(out TPA: TPointArray; Area: TBox; Col, Tol, CTS: Integer; Hue, Sat: Extended = 0.2): UInt32; constref;
type
  TCTSContainer = record CTS:Int32; Hue, Sat: Extended; end;
var
  old: TCTSContainer;

  procedure SetCTS(CTS: Integer; Hue, Sat: Extended);
  begin
    old.CTS := GetToleranceSpeed();
    GetToleranceSpeed2Modifiers(old.Hue, old.Sat);
    SetColorToleranceSpeed(CTS);
    SetToleranceSpeed2Modifiers(Hue, Sat);
  end;

  procedure ResetCTS();
  begin
    SetToleranceSpeed2Modifiers(old.hue, old.sat);
    SetColorToleranceSpeed(old.CTS);
  end;

begin
  SetLength(TPA, 0);

  SetCTS(CTS, Hue, Sat);
  FindColorsTolerance(TPA, Col, Area.X1, Area.Y1, Area.X2, Area.Y2, Tol);
  ResetCTS();

  Result := Length(TPA);
end;


(*
srl.FindColors
~~~~~~~~~~~~~~~
.. pascal::
  function TSRL.FindColors(out TPA: TPointArray; Color: TCTSColor;  Area: TBox): UInt32; constref;
  function TSRL.FindColors(out TPA: TPointArray; Color: TCTS1Color; Area: TBox): UInt32; constref;
  function TSRL.FindColors(out TPA: TPointArray; Color: TCTS2Color; Area: TBox): UInt32; constref;
  function TSRL.FindColors(out TPA: TPointArray; Color: array of TCTS2Color; Area: TBox): UInt32; constref;

Searches for the given Color, returns the resulting points in the TPA.
*)
function TSRL.FindColors(out TPA: TPointArray; Color: TCTSColor; Area: TBox): UInt32; constref;
begin
  Result := _FindColors(TPA, Area, Color.Color, Color.Tolerance, 0);
end;

function TSRL.FindColors(out TPA: TPointArray; Color: TCTS1Color; Area: TBox): UInt32; constref; overload;
begin
  Result := _FindColors(TPA, Area, Color.Color, Color.Tolerance, 1);
end;

function TSRL.FindColors(out TPA: TPointArray; Color: TCTS2Color; Area: TBox): UInt32; constref; overload;
begin
  Result := _FindColors(TPA, Area, Color.Color, Color.Tolerance, 2, Color.HueMod, Color.SatMod);
end;

function TSRL.FindColors(out TPA: TPointArray; Colors: array of TCTS2Color; Area: TBox): UInt32; constref; overload;
var
  Temp: TPointArray;
  i: Int32;
begin
  SetLength(TPA, 0);

  for i := 0 to High(Colors) do
    if _FindColors(Temp, Area, Colors[i].Color, Colors[i].Tolerance, 2, Colors[i].HueMod, Colors[i].SatMod) > 0 then
      TPA := TPA + Temp;

  Result := Length(TPA);
end;

function TSRL.CountColor(Color: TCTSColor; Area: TBox): Int32; overload;
var
  TPA: TPointArray;
begin
  Result := Self.FindColors(TPA, Color, Area);
end;

function TSRL.CountColor(Color: TCTS1Color; Area: TBox): Int32; overload;
var
  TPA: TPointArray;
begin
  Result := Self.FindColors(TPA, Color, Area);
end;

function TSRL.CountColor(Color: TCTS2Color; Area: TBox): Int32; overload;
var
  TPA: TPointArray;
begin
  Result := Self.FindColors(TPA, Color, Area);
end;


// -----------------------------------------------------------------------------
// Wait functions

type
  TCompareFunc = function(X, Y: Integer): Boolean;

function GreaterThan(X, Y: Integer): Boolean; begin Result := X > Y; end;
function LessThan(X, Y: Integer): Boolean; begin Result := X < Y; end;
function Equals(X, Y: Integer): Boolean; begin Result := X = Y; end;

(*
srl.WaitColorCount
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TSRL.WaitColorCount(Color: TCTS1Color; Area: TBox; CompareFunc: TCompareFunc; Count, WaitTime: Integer): Boolean;

See examples. :)

Example:

.. code-block:: pascal

  // Waits 5000ms for the color count in area to be greater than 50
  srl.WaitColorCount([255, 10], Area, @GreaterThan, 50, 5000);

  // Waits 500ms for the color count in area to equal 20
  srl.WaitColorCount([255, 10], Area, @Equals, 20, 5000);
*)
function TSRL.WaitColorCount(Color: TCTS1Color; Area: TBox; CompareFunc: TCompareFunc; Count, WaitTime: Integer): Boolean; constref;
var
  t: UInt64;
  TPA: TPointArray;
begin
  t := GetTickCount64() + WaitTime;
  repeat
    if (CompareFunc(FindColors(TPA, Color, Area), Count)) then
      Exit(True);
    Wait(Random(50, 100));
  until (GetTickCount64() >= t);
end;

(*
srl.WaitColor
~~~~~~~~~~~~~

.. code-block:: pascal

    function TSRL.WaitColor(Color: Integer; p: TPoint; WaitTime: Integer): Boolean;

Waits 'WaitTime' for the color 'Color' to be found at the point 'p'.

Example:

.. code-block:: pascal

    if (srl.WaitColor(clRed, Point(100, 100), 1000)) then
      Writeln('clRed has been found at point(100, 100) within 1 second');
*)
function TSRL.WaitColor(Color: Integer; pt: TPoint; WaitTime: Integer): Boolean; constref;
var
  t: UInt64;
begin
  t := GetTickCount64() + WaitTime;
  repeat
    if (GetColor(pt.x, pt.y) = Color) then
      Exit(True);
    Wait(Random(50, 100));
  until (GetTickCount64() > t);
end;

function TSRL.WaitDTM(DTM: Integer; out pt: TPoint; Area: TBox; WaitTime: Integer): Boolean; constref;
var
  t: UInt64;
begin
  t := GetTickCount64() + WaitTime;
  repeat
    if FindDTM(DTM, pt.x, pt.y, Area.X1, Area.Y1, Area.X2, Area.Y2) then
      Exit(True);
    Wait(Random(50, 100));
  until (GetTickCount64() > t);
end;

function TSRL.WaitBitmap(BMP, Tolerance: Integer; out pt: TPoint; Area: TBox; WaitTime: Integer): Boolean; constref;
var
  t: UInt64;
begin
  t := GetTickCount64() + WaitTime;
  repeat
    if (FindBitmapToleranceIn(BMP, pt.x, pt.y, Area.X1, Area.Y1, Area.X2, Area.Y2, Tolerance)) then
      Exit(True);
    Wait(Random(50, 100));
  until (GetTickCount64() > t);
end;


//-----------------------------------------------------------------------------------\\
//----| Older color finding helper |-------------------------------------------------||
//-----------------------------------------------------------------------------------//

(*
type TColorSettings
~~~~~~~~~~~~~~~~~~~

A record that provides easy access to the Simba CTS settings.
*)
type
  TColorSettings = record
    CTS: Byte;
    HueMod, SatMod: Extended;
 end;

(*
ColorSetting
~~~~~~~~~~~~
.. code-block:: pascal

    function ColorSetting(CTS: Byte; Hue: Extended = 0.2; Sat: Extended = 0.2): TColorSettings;

Creates a TColorSettings type.

Example:

.. code-block:: pascal

    // CTS 2
    Writeln(ColorSetting(2, 0.55, 0.20));
    // CTS 1
    Writeln(ColorSetting(1));
*)
function ColorSetting(CTS: Byte; Hue: Extended = 0.2; Sat: Extended = 0.2): TColorSettings;
begin
  Result.CTS := CTS;
  Result.HueMod := Hue;
  Result.SatMod := Sat;
end;

(*
TColorSettings.Retrieve
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TColorSettings.Retrieve();

Retrieves all color setting information.

Example:

.. code-block:: pascal

    cs.Retrieve();
*)
procedure TColorSettings.Retrieve();
begin
  Self.CTS := GetToleranceSpeed();
  GetToleranceSpeed2Modifiers(Self.HueMod, Self.SatMod);
end;

(*
TColorSettings.Apply
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TColorSettings.Apply();

Applies the color settings stored in the type.

Example:

.. code-block:: pascal

    cs.Apply();
*)
procedure TColorSettings.Apply();
begin
  SetColorToleranceSpeed(Self.CTS);
  SetToleranceSpeed2Modifiers(Self.HueMod, Self.SatMod);
end;

(*
FindColorsTolerance; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindColorsTolerance(var TPA: TPointArray; Color: Integer; SearchArea: TBox; Tolerance: Int32; cs: TColorSettings): Boolean; overload;

Overload for FindColorsTolerance that accepts a TColorSettings parameter.

Example:

.. code-block:: pascal

    FindColorsTolerance(TPA, clRed, Area, 10, ColorSetting(2, 0.55, 1.10));
*)
function FindColorsTolerance(out TPA: TPointArray; Color: Integer; SearchArea: TBox; Tolerance: Int32; cs: TColorSettings): Boolean; overload;
var
  tmp: TColorSettings;
begin
  tmp.Retrieve();
  cs.Apply();

  try
    Result := FindColorsTolerance(TPA, Color, SearchArea, Tolerance);
  finally
    tmp.Apply();
  end;
end;

(*
FindColorTolerance; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindColorTolerance(out x, y: Int32; Color: Integer; SearchArea: TBox; Tolerance: Int32; cs: TColorSettings): Boolean; overload;

Overload for FindColorTolerance that accepts a TColorSettings parameter.

Example:

.. code-block:: pascal

    FindColorsTolerance(x, y, clRed, Area, 10, ColorSetting(2, 0.55, 1.10));
*)
function FindColorTolerance(out x,y: Int32; Color: Integer; SearchArea: TBox; Tolerance: Int32; cs: TColorSettings): Boolean; overload;
var
  tmp: TColorSettings;
begin
  tmp.Retrieve();
  cs.Apply();

  try
    Result := FindColorTolerance(x, y, Color, SearchArea, Tolerance);
  finally
    tmp.Apply();
  end;
end;

(*
CountColorTolerance; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function CountColorTolerance(Color: Integer; SearchArea: TBox; Tolerance: Int32; cs: TColorSettings): Integer; overload;

Overload for CountColorTolerance that accepts a TColorSettings parameter.

Example:

.. code-block:: pascal

    Writeln(CountColorTolerance(clRed, Area, 10, ColorSetting(2, 0.50, 1.00)));
*)
function CountColorTolerance(Color: Integer; SearchArea: TBox; Tolerance: Int32; cs: TColorSettings): Integer; overload;
var
  tmp: TColorSettings;
begin
  tmp.Retrieve();
  cs.Apply();

  try
    Result := CountColorTolerance(Color, SearchArea, Tolerance);
  finally
    tmp.Apply();
  end;
end;


(*
type TColorEx
~~~~~~~~~~~~~
A simple record that stores a color, tolerance and color settings.

Example:

.. code-block:: pascal

  var
    CTS1_Color: TColorEx = [clRed, 20, [1]];
    CTS2_Color: TColorEx = [clRed, 20, [2, 0.50, 1.00]];
    CTS3_Color: TColorEx = [clRed, 20, [3, 0.00, 0.00, 0.50]];
*)
type
  TColorEx = record
    Color, Tolerance: Integer;
    Settings: TColorSettings;
 end;

type
  TColorExArray = array of TColorEx;

