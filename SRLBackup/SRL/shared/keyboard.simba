(*
Keyboard
=========
The Keyboard file holds functions and procedures that are related to the keyboard.
*)
type
  TKeyboard = type TObject;

var
  Keyboard: TKeyboard;

(*
Keyboard.PressKey
~~~~~~~~~~~~~~~~~
.. pascal:: procedure TKeyboard.PressKey(Key: Integer);

Presses the given virtual key. 

Note: See `VK_` constants for values to pass it.
*)
procedure TKeyboard.PressKey(Key: Integer);
begin
  {$IFDEF SMART}
  if (Key = 13) then
    Key := 10;
  {$ENDIF}

  Self.KeyDown(Key);
  Wait(Trunc(srl.SkewedRand(60,45,180)));
  Self.KeyUp(Key);
end;

(*
Keyboard.KeyDown
~~~~~~~~~~~~~~~~
.. pascal:: procedure TKeyboard.KeyDown(Key: Integer);

Presses down the given virtual key. 

Note: See `VK_` constants for values to pass it.
*)
procedure TKeyboard.KeyDown(const Key: Integer);
begin
  System.KeyDown(Key);
end;

(*
Keyboard.KeyUp
~~~~~~~~~~~~~~~~
.. pascal:: procedure TKeyboard.KeyUp(Key: Integer);

Releases the given virtual key. 

Note: See `VK_` constants for values to pass it.
*)
procedure TKeyboard.KeyUp(const Key: Integer);
begin
  System.KeyUp(Key);
end;

(*
Keyboard.IsKeyDown
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TKeyboard.IsKeyDown(Key: Integer);

Returns True if the given virtual key is currently down. 

Note: See `VK_` constants for values to pass it.
*)
function TKeyboard.IsKeyDown(const Key: Integer): Boolean;
begin
  Result := System.IsKeyDown(Key);
end;

(*
Keyboard.Send
~~~~~~~~~~~~~
.. pascal:: 
  procedure TKeyboard.Send(const Text: String; const KeyWait, KeyModWait, KeyPressWait: UInt32); overload;
  procedure TKeyboard.Send(const Text: String); overload;
  procedure TKeyboard.Send(const Text: String; KeyPressAfter: Integer); overload;
  
Writes the given text to whatever window is currently in focus. 

First overload allows you to pass KeyWait, KeyModWait, and KeyPressWait, all are timing modifiers.
Last overload allows you to pass a long a key to be pressed after the text has been typed, for example ``VK_ENTER``.
*)
procedure TKeyboard.Send(const Text: String; const KeyWait, KeyModWait, KeyPressWait: UInt32); overload;
var
  i: UInt32;
begin
  for i := 1 to Length(Text) do
  begin
    SendKeys(Text[i], KeyWait, KeyModWait);
    Wait(KeyPressWait);
  end;
end;

procedure TKeyboard.Send(const Text: String); overload;
begin
  Self.Send(Text, Random(30, 60), Random(30, 60), Random(40, 85));
end;

procedure TKeyboard.Send(const Text: String; KeyPressAfter: Integer); overload;
begin
  Self.Send(Text);
  Wait(30, 120, wdLeft);
  Self.PressKey(KeyPressAfter);
end;
