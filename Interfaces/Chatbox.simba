// Checks if the chatbox is scrollable in the given direction.
function TRSChatbox.CanScroll(Down: Boolean = True): Boolean;
begin
    Result := (Down and (GetColor(505, 440) = 1778729)) or
              (not Down and (GetColor(505, 365) = 1778729));
end;

// Checks if the chatbox is scrollable.
function TRSChatbox.CanScroll(): Boolean; overload;
begin
    Result := Self.CanScroll(True) or Self.CanScroll(False);
end;

// Finds the chatbox scroll bar position.
function TRSChatbox.GetScrollPosition(): Int32;
var
  X, Y: Int32;
begin
  FindColor(X, Y, 4282469, 496, 360, 512, 440);
  Result := Y - 361;
end;

// Scrolls the chatbox in the given direction.
function TRSChatbox.Scroll(Down: Boolean = True; MinSteps: Int32 = 2; MaxSteps: Int32 = 5): Boolean;
var
  ScrollPosition: Int32;
begin
  if not Self.CanScroll(Down) then
    Exit(True);
  ScrollPosition := Self.GetScrollPosition();

  Mouse.Move(Box(10, 344, 496, 458));
  Mouse.Scroll(Random(MinSteps, MaxSteps), Down);

  Result := ScrollPosition <> Self.GetScrollPosition();
end;

// Random chatbox scrolling... good for antiban.
function TRSChatbox.RandomScroll(): Boolean;
begin
  case Random(0, 5) of
    0: Result := Self.Scroll(False);        //Short scroll
    1: Result := Self.Scroll(True);         //Short scroll
    2: Result := Self.Scroll(False, 4, 8);  //Long scroll
    3: Result := Self.Scroll(True, 4, 8);   //Long scroll
    4: Result := Self.Scroll(False, 8, 14); //Very long scroll
    5: Result := Self.Scroll(True, 8, 14);  //Very long scroll
  end;
end;

// Scrolls chatbox to the end.
function TRSChatbox.ScrollToEnd(Down: Boolean = True; WaitTime: UInt32 = 3000): Boolean;
var
  t: UInt64;
begin
  t := GetTickCount() + WaitTime;

  repeat
    if not Self.CanScroll(Down) then
      Exit(True);
    Self.Scroll(Down, Random(4, 6), Random(6, 10));
    Wait(100, 200);
  until (GetTickCount() >= t);
    Result := not Self.CanScroll(Down);
end;


function TRSChatbox.IsTabActive(Tab: EChatTab): Boolean;
var
  TabBox: TBox;
  ColorCount, ColorCountBlue: Int32;
begin
  TabBox := FTabs[ord(Tab)];
  TabBox.X1 := (TabBox.X2 - Round(TabBox.Width/4));

  ColorCount := CountColorTolerance(4281441, TabBox, 13);
  ColorCountBlue := CountColorTolerance(2498337, TabBox, 13);

  if ColorCountBlue > 100 then
    Exit(False);
  Result := ((ColorCount < 14) or (ColorCount > 22));
end;

function TRSChatbox.GetActiveTab(): EChatTab;
var
  i: Int32;
begin
  for i := 0 to High(Self.FTabs) do
  begin
    if Self.IsTabActive(EChatTab(i)) then
      Exit(EChatTab(i));
  end
end;

function TRSChatbox.ClickTab(tab: EChatTab; Option: String = ''): Boolean; override;
begin
  if Self.IsTabActive(tab) then
    Exit(True);

  Result := True;

  if (Option = '') then
    Mouse.Click(FTabs[ord(tab)], mouse_Left)
  else
  begin
    Mouse.Move(FTabs[ord(tab)]);
    if (not ChooseOption.Open()) or (not ChooseOption.Select(Option)) then
      Exit(False);
  end;
end;

