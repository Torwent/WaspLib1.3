type
  EBankTab = (TAB0, TAB1, TAB2, TAB3, TAB4,
              TAB5, TAB6, TAB7, TAB8, TAB9);

var
  FTabs: array [EBankTab] of TBox;
  BankBox: TBox = [73, 83, 456, 298];
  NoteDTM := DTMFromString('mlwAAAHicY2dgYDBlYmDwB2JfILaGsk2A2AqIHwPlXwLxJyD+AMRPgPgNlM3AwIgHUwQAr2UIVA==');

// BankScreen.Setup override to include bank tabs.
procedure TRSBankScreen.__Setup(); override;

  procedure SetButtonBounds(Button: EBankButton; X, Y, Width, Height: Int32);
  begin
    FButtons[Button] := [X, Y, X + Width, Y + Height];
  end;

  procedure SetTabBounds(Tab: EBankTab; X, Y, Width, Height: Int32);
  begin
    FTabs[Tab] := [X, Y, X + Width, Y + Height];
  end;

begin
  with Self do
  begin
    SetBounds(Box(16, 6, 503, 336));
    SetName('Bankscreen');
    SetStatic(True);

    FSlots := BankBox.Partition(6, 8);
    FSlots.ModifySide('x2', -16);
    FSlots.ModifySide('y2', -4);

    with Self.GetBounds() do
    begin
      SetTabBounds(TAB0, X1 + 46, Y1 + 39, 35, 31);
      SetTabBounds(TAB1, X1 + 87, Y1 + 39, 35, 31);
      SetTabBounds(TAB2, X1 + 127, Y1 + 39, 35, 31);
      SetTabBounds(TAB3, X1 + 167, Y1 + 39, 35, 31);
      SetTabBounds(TAB4, X1 + 207, Y1 + 39, 35, 31);

      SetTabBounds(TAB5, X1 + 247, Y1 + 39, 35, 31);
      SetTabBounds(TAB6, X1 + 287, Y1 + 39, 35, 31);
      SetTabBounds(TAB7, X1 + 327, Y1 + 39, 35, 31);
      SetTabBounds(TAB8, X1 + 367, Y1 + 39, 35, 31);
      SetTabBounds(TAB9, X1 + 407, Y1 + 39, 35, 31);

      SetButtonBounds(BANK_BUTTON_REARRANGE_SWAP,   X1 + 5,  Y2 - 26, 49, 21);
      SetButtonBounds(BANK_BUTTON_REARRANGE_INSERT, X1 + 55, Y2 - 26, 49, 21);

      SetButtonBounds(BANK_BUTTON_WITHDRAW_ITEM, X1 + 105, Y2 - 26, 49, 21);
      SetButtonBounds(BANK_BUTTON_WITHDRAW_NOTE, X1 + 155, Y2 - 26, 49, 21);

      SetButtonBounds(BANK_BUTTON_QUANTITY_ONE,  X1 + 205, Y2 - 26, 24, 21);
      SetButtonBounds(BANK_BUTTON_QUANTITY_FIVE, X1 + 230, Y2 - 26, 24, 21);
      SetButtonBounds(BANK_BUTTON_QUANTITY_TEN,  X1 + 255, Y2 - 26, 24, 21);
      SetButtonBounds(BANK_BUTTON_QUANTITY_X,    X1 + 280, Y2 - 26, 24, 21);
      SetButtonBounds(BANK_BUTTON_QUANTITY_ALL,  X1 + 305, Y2 - 26, 24, 21);

      SetButtonBounds(BANK_BUTTON_PLACEHOLDER,       X1 + 331, Y2 - 41, 35, 35);
      SetButtonBounds(BANK_BUTTON_SEARCH,            X1 + 370, Y2 - 41, 35, 35);
      SetButtonBounds(BANK_BUTTON_DEPOSIT_INVENTORY, X1 + 409, Y2 - 41, 35, 35);
      SetButtonBounds(BANK_BUTTON_DEPOSIT_WORN,      X1 + 446, Y2 - 41, 35, 35);

      SetButtonBounds(BANK_BUTTON_CLOSE, X2 - 27, Y1 + 7, 20, 20);
    end;
  end;
end;

// BankScreen.Debug override to include bank tabs.
procedure TRSBankScreen.Debug(); override;
var
  BMP, i, c: Integer;
begin
  BMP := BitmapFromClient(GetClientBounds());

  c := 255;

  for i:=0 to High(FTabs) do
  begin
    DrawTPABitmap(BMP, EdgeFromBox(FTabs[i]), c);
    c := i + ((c * 128) and $FFFFFF);
    WriteLn(c);
  end;

  for i:=0 to High(FButtons) do
  begin
    DrawTPABitmap(BMP, EdgeFromBox(fButtons[i]), c);
    c := i + ((c * 128) and $FFFFFF);
    WriteLn(c);
  end;
  for i:=0 to High(FSlots) do
    DrawTPABitmap(BMP, EdgeFromBox(fSlots[i]), $00FF00);

  ShowBitmap(BMP);
  FreeBitmap(BMP);
end;

// Override to make have a small chance of not closing the bank with escape if it's enabled.
// IMO a normal human playing RuneScape doesn't close the bank 100% of the time with escape, even
// if it's the most efficient player. Also added a customizable wait timer.
function TRSBankScreen.Close(WaitTime: UInt32): Boolean; overload;
var
  t: UInt64;
begin
  if (not Self.IsOpen()) then
    Exit(True);

  if (srl.CloseInterfacesWithEscape and (Random(0, 99) > Random(3, 10))) then
  begin
    Keyboard.PressKey(VK_ESCAPE);
    t := GetTickCount() + Random(4000, 5000);
    while (t > GetTickCount()) do
    begin
      if (not Self.IsOpen()) then
        Exit(True);
    end;
    srl.ToggleCloseInterfacesWithEscape(False);
  end;

  Self.ClickButton(BANK_BUTTON_CLOSE);
  if WaitTime = 0 then
    t := GetTickCount() + Random(250, 500)
  else
    t := GetTickCount() + WaitTime;
  while (t > GetTickCount()) do
  begin
    if (not Self.IsOpen()) then
      Exit(True);
  end;
end;

function TRSBankScreen.ClickButton(btn: EBankButton; clickType: Integer = mouse_Left): Boolean; override;
begin
  Result := Self.IsOpen();

  if (Result) then
  begin
    if Self.IsToggled(btn) then
      Exit(True)
    else
      Mouse.Click(Self.fButtons[btn], clickType);
  end;
  Wait(100, 250);
end;

function TRSBankScreen.DepositAll(): Boolean; override;
var
  InvCount: Int32;
begin
  InvCount := Inventory.Count();
  if (InvCount = 0) then
    Exit(True);

  Result := Self.ClickButton(BANK_BUTTON_DEPOSIT_INVENTORY);

  Inventory.WaitCount(InvCount, 1000, __LT__);

end;

// BankScreen tabs functions. They are self explanatory so no explanations here.
function TRSBankScreen.OpenTab(Tab: EBankTab): Boolean;
var
  t: UInt64;
begin
  if (not BankScreen.IsOpen()) then
    Exit(False);

  if (Self.IsTabActive(Tab)) then
      Exit(True);

  if Ord(Tab) > Self.CountTabs() then
    Exit(False);

  Self.ClickTab(Tab);
  t := GetTickCount() + Random(3000, 3500);
  while (t > GetTickCount()) do
  begin
    if (Self.IsTabActive(Tab)) then
      Exit(True);
  end;
end;

function TRSBankScreen.ClickTab(Tab: EBankTab; clickType: Integer = mouse_Left): Boolean;
begin
  if (BankScreen.IsOpen()) then
  begin
    Mouse.Click(FTabs[Tab], clickType);
    Exit(True);
  end
  else
    Exit(false);
end;

function TRSBankScreen.IsTabActive(Tab: EBankTab): Boolean;
begin
  Result := Tab = BankScreen.GetCurrentTab();
end;




// Counts how many bank tabs the bank has
function TRSBankScreen.CountTabs(): Int32;
var
  i     : Integer;
  xVals : TIntegerArray;
begin
  if (not BankScreen.IsOpen) then
    Exit;

  setLength(xVals, 10);
  xVals := [99, 139, 179, 219, 259, 299, 339, 379, 419, 459];
  Result := 0;

  for i := 0 to 9 do
    if (not (getColor(xVals[i], 65) = 5334129)) then
      Exit(i - 1);

  Result := 9;

end;

// This next 2 functions I'm not sure who the creator is since I've seen
// them in several scripts but credits to whoever made this.

function TRSBankScreen.GetCurrentTab(): EBankTab;
var
  i     : Integer;
  xVals : TIntegerArray;
begin
  if (not BankScreen.IsOpen) then
    Exit;

  setLength(xVals, 10);
  xVals := [80,121,160,207,238,280,318,358,400,440];
  for i:=0 to 9 do
    if (not (getColor(xVals[i],79) = 5334129)) then
      Exit(EBankTab(i));
  Result := TAB0;
end;

function TRSBankScreen.WaitTabChange(Tab: EBankTab; TimeToWait: Integer): Boolean;
var
  T : Integer;
begin
  Result := false;
  if (not BankScreen.IsOpen) then
    Exit;

  T:=getsystemtime;
  while (T + TimeToWait > getsystemtime) do
    if Self.GetCurrentTab() = Tab then
      Exit(True);
end;

// Checks if the bankscreen is scrollable in the given direction
function TRSBankScreen.CanScroll(Down: Boolean = True): Boolean;
begin
    Result := (Down and (GetColor(486, 276) = 1646629)) or
              ((not Down) and (GetColor(486, 99) = 1646629));
end;

// Checks if the bankscreen is scrollable.
function TRSBankScreen.CanScroll(): Boolean; overload;
begin
    Result := Self.CanScroll(True) or Self.CanScroll(False);
end;

// Finds the scroll bar position
function TRSBankScreen.GetScrollPosition(): Int32;
var
  X, Y: Int32;
begin
  FindColor(X, Y, 4282469, 485, 99, 495, 276);
  Result := Y;
end;

// Scrolls the bankscreen in the given direction
function TRSBankScreen.Scroll(Down: Boolean = True; MinSteps: Int32 = 2; MaxSteps: Int32 = 5): Boolean;
var
  ScrollPosition: Int32;
begin
  if not Self.CanScroll(Down) then
    Exit(True);
  ScrollPosition := Self.GetScrollPosition();

  Mouse.Move(BankBox);
  Mouse.Scroll(Random(MinSteps, MaxSteps), Down);

  Result := ScrollPosition <> Self.GetScrollPosition();
end;

//
function TRSBankScreen.FindAndFixDTM(DTM: Integer): Int32;
var
  BankHalves: TBoxArray;
  BottomBank: Boolean;
  Slot, i: Int32;
begin
  if (SRL.FindDTMInTBA(DTM, [BankBox], 1) = []) then
    Exit(-1);

  Slot := Self.FindDTM(DTM);

  if Slot > -1 then
    Exit(Slot);


  BankHalves := BankBox.Partition(2, 1);

  // Checks in the DTM is in the lower side of the bank
  BottomBank := SRL.FindDTMInTBA(DTM, [BankHalves[1]], 1) <> [];


  for i := 0 to 4 do
  begin
    if not Self.CanScroll(BottomBank) then
      Break;

    Self.Scroll(BottomBank, 1, 1);
    Slot := Self.FindDTM(DTM);

    if Slot > -1 then
      Exit(Slot);
  end;

  Result := -1;
end;

// Scrolls until it finds the DTM on the bankscreen
function TRSBankScreen.ScrollToDTM(Tab: EBankTab; DTM: Integer): Int32;
var
  BankSlot: Int32;
  t: UInt64;
begin

  BankSlot := Self.FindAndFixDTM(DTM);
  if BankSlot <> -1 then
    Exit(BankSlot);

  Self.OpenTab(Tab);

  BankSlot := Self.FindAndFixDTM(DTM);
  if BankSlot <> -1 then
    Exit(BankSlot);

  t := GetTickCount() + Random(7000, 10000);
  repeat
    BankSlot := Self.FindAndFixDTM(DTM);
    if BankSlot <> -1 then
      Exit(BankSlot);
    if not Self.CanScroll(True) then
      Exit(-1);
    Self.Scroll(True);
    BankSlot := Self.FindAndFixDTM(DTM);
  until (BankSlot <> -1) or (t < GetTickCount());

  Result := BankSlot;
end;

function TRSBankScreen.ScrollToDTM(DTM: Integer): Int32; overload
var
  BankSlot: Int32;
  t: UInt64;
begin

  BankSlot := Self.FindAndFixDTM(DTM);
  if BankSlot <> -1 then
    Exit(BankSlot);

  Self.OpenTab(TAB0);

  BankSlot := Self.FindAndFixDTM(DTM);
  if BankSlot <> -1 then
    Exit(BankSlot);

  t := GetTickCount() + Random(7000, 10000);
  repeat
    BankSlot := Self.FindAndFixDTM(DTM);
    if BankSlot <> -1 then
      Exit(BankSlot);
    if not Self.CanScroll(True) then
      Exit(-1);
    Self.Scroll(True);
    BankSlot := Self.FindAndFixDTM(DTM);
  until (BankSlot <> -1) or (t < GetTickCount());

  Result := BankSlot;
end;


// This next function is useless almost everytime except on the rare ocasion of 2 items that look the same.
// The only example I know of is seaweed and giant seaweed but there's probably more.
function TRSBankScreen.FindSecondDTM(DTM: Integer): Int32;
var A: TIntArray;
begin
  if self.IsOpen() then
  begin
    A := srl.FindDTMInTBA(DTM, Self.FSlots, 0);
    if A = [] then
      Result := -1
    else if (Length(A) < 2) then
      Result := -1
    else
      Result := A[1];
  end;
end;

// Gets the amount of the item amount in specified bank slot.
function TRSBankScreen.SlotAmount(Slot: Int32): Int32;
begin
  Result := SRL.GetItemAmount(Self.GetSlotBox(Slot));
end;

// Same as above but using DTM... This is what you will most likely use.
function TRSBankScreen.DTMAmount(DTM: Integer): Int32;
begin
  Result := Self.SlotAmount(Self.FindDTM(DTM));
end;

// Searches for DTM in inventory and if it exists, it tries to deposit it.
function TRSBankScreen.DepositDTM(DTM: Integer; AmountButton: EBankButton = BANK_BUTTON_QUANTITY_All; AllButton: Boolean = False): Boolean;
var
  ContainsItem: Boolean; //Used to store Inventory.Contains(DTM) so we don't need to check more times than needed.
  InvCount: Int32;
  t: UInt64;
begin
  Result := False;

  if (not Inventory.Contains(DTM)) then
    Exit(True);

  if (not AllButton) and (not BankScreen.IsToggled(AmountButton)) then
    BankScreen.ClickButton(AmountButton, mouse_Left);

  InvCount := Inventory.Count();
  t := GetTickCount() + 5000;

  repeat
    if AllButton then
      BankScreen.ClickButton(BANK_BUTTON_DEPOSIT_INVENTORY, mouse_Left)
    else
      Inventory.MouseSlot(Inventory.FindDTM(DTM)[0], mouse_Left);
    Inventory.WaitCount(InvCount, 2000, __LT__);
    ContainsItem := Inventory.Contains(DTM);
  until ((not ContainsItem) or (GetTickCount() >= t));

  Result := not ContainsItem;
end;

// Same as above but for multiple DTMs... useful to deposit several items like
// common monster drops.
function TRSBankScreen.DepositDTMs(DTMs: TIntArray; AmountButton: EBankButton = BANK_BUTTON_QUANTITY_All; AllButton: Boolean = False): Boolean;
var
  i: Int32;
begin
  Result := True;

  for i:=0 to High(DTMs) do
  begin
    if not Self.DepositDTM(DTMs[i], AmountButton, AllButton) then
    begin
      Result := False;
      Break;
    end;
  end;
end;


function TRSBankScreen.WithdrawFromTab(Tab: EBankTab; Slot: Int32; Amount: Int32; UpText: TStringArray = []; WithdrawMode: EBankButton = BANK_BUTTON_WITHDRAW_ITEM; Quantity: EBankButton = BANK_BUTTON_QUANTITY_ONE): Boolean;
var
  InvCount: Int32;
begin
  if BankScreen.GetCurrentTab() <> Tab then
      BankScreen.OpenTab(Tab);
  InvCount := Inventory.Count();
  Result := Self.Withdraw(Slot, Amount, UpText, WithdrawMode, Quantity);
  Inventory.WaitCount(InvCount, 1200, __GT__);
end;

// Only useful with runelite menu entry swapper.
function TRSBankScreen.ShiftWithdrawFromTab(Tab: EBankTab; Slot: Int32; Amount: Int32; UpText: TStringArray = []; WithdrawMode: EBankButton = BANK_BUTTON_WITHDRAW_ITEM; Quantity: EBankButton = BANK_BUTTON_QUANTITY_ONE): Boolean;
begin

  if not Keyboard.isKeyDown(VK_SHIFT) then
  begin
    Keyboard.KeyDown(VK_SHIFT);
    WaitEx(110,10);
  end;

  Result := Self.WithdrawFromTab(Tab, Slot, Amount, UpText, WithdrawMode, Quantity);

  if Keyboard.isKeyDown(VK_SHIFT) then
  begin
    Keyboard.KeyUp(VK_SHIFT);
    WaitEx(110,10);
  end;

end;

// Scrolls the bank until it finds the specified DTM and if found, it tries to
// withdraw the amount specified of that item.
function TRSBankScreen.WithdrawDTM(DTM: Integer; ItemAmount: Int32; SubStrings: TStringArray; AmountBtn: EBankButton = BANK_BUTTON_QUANTITY_ONE): Boolean;
var
  i, item_slot, inv_count: Int32;
begin
  if ((not Self.IsOpen) or (Self.IsOpen() and Inventory.IsFull())) then
    Exit(False);

  item_slot := Self.FindDTM(DTM);
  if (item_slot = -1) then
  begin
    if Self.ScrollToDTM(DTM) then
      item_slot := Self.FindDTM(DTM)
    else
      Exit(False);
  end;

  inv_count := Inventory.Count();

  repeat
    if Inventory.IsFull() then
    begin
      //add Self.DepositItems instead
      Self.ClickButton(BANK_BUTTON_DEPOSIT_INVENTORY, mouse_Left);
      Exit(False);
    end;
    if (Self.SlotAmount(item_slot) <= 1) then
       Exit(False);

    if (ItemAmount > 4) then
    begin
      ChooseOption.Close();

      if Self.IsToggled(AmountBtn) then
      begin
        if not Keyboard.isKeyDown(VK_SHIFT) then
        begin
          Keyboard.KeyDown(VK_SHIFT);
          WaitEx(110,10);
        end;
      end;

      Mouse.Move(Self.GetSlotBox(item_slot));

      if Self.IsUpText([IntToStr(ItemAmount)]) then
        Mouse.Click(mouse_Left)
      else
      begin
        if Keyboard.isKeyDown(VK_SHIFT) then
        begin
          Keyboard.KeyUp(VK_SHIFT);
          WaitEx(110,10);
        end;
        Self.Withdraw(item_slot, ItemAmount, SubStrings, BANK_BUTTON_WITHDRAW_ITEM);
      end;

      if Keyboard.isKeyDown(VK_SHIFT) then
      begin
        Keyboard.KeyUp(VK_SHIFT);
        WaitEx(110,10);
      end;
    end

    else
    begin
      Self.ClickButton(AmountBtn, mouse_Left);
      Mouse.Move(Self.GetSlotBox(item_slot));
      for i:=1 to ItemAmount do
      begin
        if (Inventory.Count(DTM) = 3) then
          break;
        Mouse.Click(mouse_left);
        Sleep(Random(100, 250));
      end;
    end;
    Inventory.WaitCount((inv_count + ItemAmount), 1200);
  until (Inventory.Count(DTM) >= ItemAmount);

  Result := True;

end;

// See TRSBankScreen.FindSecondDTM
function TRSBankScreen.WithdrawSecondDTM(DTM: Integer; ItemAmount: Int32; SubStrings: TStringArray; AmountBtn: EBankButton = BANK_BUTTON_QUANTITY_ONE): Boolean;
var
  i, item_slot, inv_count: Int32;
begin
  if ((not Self.IsOpen) or (Self.IsOpen() and Inventory.IsFull())) then
    Exit(False);

  item_slot := Self.FindSecondDTM(DTM);
  if (item_slot = -1) then
  begin
    if Self.ScrollToDTM(DTM) then
      item_slot := Self.FindSecondDTM(DTM)
    else
      Exit(False);
  end;

  inv_count := Inventory.Count();

  repeat
    if Inventory.IsFull() then
    begin
      //add Self.DepositItems instead
      Self.ClickButton(BANK_BUTTON_DEPOSIT_INVENTORY, mouse_Left);
      Exit(False);
    end;
    if (Self.SlotAmount(item_slot) <= 1) then
       Exit(False);

    if (ItemAmount > 4) then
    begin
      ChooseOption.Close();

      if Self.IsToggled(AmountBtn) then
      begin
        if not Keyboard.isKeyDown(VK_SHIFT) then
        begin
          Keyboard.KeyDown(VK_SHIFT);
          WaitEx(110,10);
        end;
      end;

      Mouse.Move(Self.GetSlotBox(item_slot));

      if Self.IsUpText([IntToStr(ItemAmount)]) then
        Mouse.Click(mouse_Left)
      else
      begin
        if Keyboard.isKeyDown(VK_SHIFT) then
        begin
          Keyboard.KeyUp(VK_SHIFT);
          WaitEx(110,10);
        end;
        Self.Withdraw(item_slot, ItemAmount, SubStrings, BANK_BUTTON_WITHDRAW_ITEM);
      end;

      if Keyboard.isKeyDown(VK_SHIFT) then
      begin
        Keyboard.KeyUp(VK_SHIFT);
        WaitEx(110,10);
      end;
    end

    else
    begin
      Self.ClickButton(AmountBtn, mouse_Left);
      Mouse.Move(Self.GetSlotBox(item_slot));
      for i:=1 to ItemAmount do
      begin
        if (Inventory.Count(DTM) = 3) then
          break;
        Mouse.Click(mouse_left);
        Sleep(Random(100, 250));
      end;
    end;
    Inventory.WaitCount((inv_count + ItemAmount), 1200);
  until (Inventory.Count(DTM) >= ItemAmount);

  Result := True;

end;

// Same as TRSBankScreen.WithdrawDTM but does it within a specified tab
function TRSBankScreen.WithdrawDTMFromTab(Tab: EBankTab; DTM: Integer; ItemAmount: Int32 = -1; SubStrings: TStringArray; AmountBtn: EBankButton = BANK_BUTTON_QUANTITY_ONE): Boolean;
var
  i, ItemSlot, InvCount: Int32;
  UpText: String;
begin
  if (not Self.IsOpen()) or Inventory.IsFull() then
    Exit(False);

  ItemSlot := Self.FindDTM(DTM);
  if (ItemSlot = -1) then
  begin
    if Self.ScrollToDTM(Tab, DTM) <> -1 then
      ItemSlot := Self.FindDTM(DTM)
    else
      Exit(False);
  end;

  InvCount := Inventory.Count();

  repeat
    if Inventory.IsFull() then
    begin
      if (ItemAmount = -1) and (Inventory.Count(DTM) >= 25) then
        Exit(True);
      //add Self.DepositItems instead
      Self.ClickButton(BANK_BUTTON_DEPOSIT_INVENTORY, mouse_Left);
      Exit(False);
    end;

    if (Self.SlotAmount(ItemSlot) <= 1) then
       Exit(False);

    if (ItemAmount > 4) then
    begin
      if (AmountBtn = BANK_BUTTON_QUANTITY_ONE) then
      begin
        ChooseOption.Close();

        Mouse.Move(Self.GetSlotBox(ItemSlot));
        if (ItemAmount = -1) and Self.IsUpText(['All', 'but']) then
          Mouse.Click(mouse_Left)
        else if Self.IsUpText([IntToStr(ItemAmount)]) then
          Mouse.Click(mouse_Left)
        else
          Self.Withdraw(ItemSlot, ItemAmount, SubStrings, BANK_BUTTON_WITHDRAW_ITEM);
      end
      else
      begin
        if not Self.IsToggled(AmountBtn) then
          Self.ClickButton(AmountBtn, mouse_Left);
        Mouse.Move(Self.GetSlotBox(ItemSlot));
        Mouse.Move(Self.GetSlotBox(ItemSlot));
        if (ItemAmount = 1337) and Self.IsUpText(['All', 'but']) then
          Mouse.Click(mouse_Left)
        else if Self.IsUpText([IntToStr(ItemAmount)]) then
          Mouse.Click(mouse_Left)
        else
          Self.Withdraw(ItemSlot, ItemAmount, SubStrings, BANK_BUTTON_WITHDRAW_ITEM);
      end;
    end

    else

    begin

      if (AmountBtn = BANK_BUTTON_QUANTITY_ONE) then
      begin
        if not Self.IsToggled(AmountBtn) then
          Self.ClickButton(AmountBtn, mouse_Left);
        for i:=1 to ItemAmount do
        begin
          if (Inventory.Count(DTM) = 3) then
            break;
          Mouse.Move(Self.GetSlotBox(ItemSlot));
          Mouse.Click(mouse_left);
          Sleep(Random(100, 250));
        end;
      end
      else
      begin
        if not Self.IsToggled(AmountBtn) then
          Self.ClickButton(AmountBtn, mouse_Left);
        Mouse.Move(Self.GetSlotBox(ItemSlot));
        if ItemAmount = -1 then
          UpText := 'All'
        else
          UpText := IntToStr(ItemAmount);
        if Self.IsUpText([UpText]) then
        begin
          Mouse.Click(mouse_left);
          Sleep(Random(100, 250));
        end
        else
          Self.Withdraw(ItemSlot, ItemAmount, SubStrings, BANK_BUTTON_WITHDRAW_ITEM, AmountBtn);
      end;
    end;

    Inventory.WaitCount(InvCount, 1200, __GT__);
    Wait(500);
  until ((ItemAmount = -1 ) and Inventory.IsFull()) or (Inventory.Count(DTM) >= ItemAmount);

  Result := True;

end;


function TRSBankScreen.WithdrawDTM2(Tab: EBankTab; DTM: Integer; ItemAmount: Int32 = -1; SubStrings: TStringArray; Quantity: EBankButton = BANK_BUTTON_QUANTITY_ONE): Boolean;
var
  i, ItemSlot, InvCount: Int32;
  t: UInt64;
  WithdrawMode: EBankButton = BANK_BUTTON_WITHDRAW_ITEM;
  UpText: String;
begin
  if not Self.IsOpen() then
    Exit(False);

  ChooseOption.Close();

  if ItemAmount = -1 then
  begin
    if not Inventory.HasSpace(1) then
      Exit(False);
  end
  else if ItemAmount = 0 then
    Exit(False)
  else if not Inventory.HasSpace(ItemAmount) then
    Exit(False);

  InvCount := Inventory.Count();

  ItemSlot := Self.ScrollToDTM(Tab, DTM);
  if (ItemSlot < 0) or (Self.SlotAmount(ItemSlot) < ItemAmount) then
    Exit(False);

  Self.ClickButton(WithdrawMode, mouse_Left);
  Self.ClickButton(Quantity, mouse_Left);

  t := GetTickCount() + Random(5000, 6000);
  repeat
    Mouse.Move(Self.GetSlotBox(ItemSlot));

    if ItemAmount > 4 then
    begin
      if Self.IsUpText([IntToStr(ItemAmount)]) then
        Mouse.Click(mouse_Left)
      else
        Self.Withdraw(ItemSlot, ItemAmount, SubStrings, WithdrawMode, Quantity);
    end

    else

    begin
      if (ItemAmount > 0) and (Quantity = BANK_BUTTON_QUANTITY_ONE) then
      begin
        for i := 1 to ItemAmount do
        begin
          Mouse.Click(mouse_left);
          Wait(100, 250);
        end;
      end
      else
      begin
        if ItemAmount = -1 then
          UpText := 'All'
        else
          UpText := IntToStr(ItemAmount);

        if Self.IsUpText([UpText]) then
          Mouse.Click(mouse_left)
        else
          Self.Withdraw(ItemSlot, ItemAmount, SubStrings, WithdrawMode, Quantity);
      end;
    end;
  until (t > GetTickCount()) or Inventory.WaitCount((InvCount + ItemAmount), 1200);

  Result := Inventory.WaitCount((InvCount + ItemAmount), 500);
end;

function TRSBankScreen.WithdrawDTM2(Tab: EBankTab; DTM: Integer; ItemAmount: Int32 = -1; SubStrings: TStringArray; Quantity: EBankButton = BANK_BUTTON_QUANTITY_ONE; Stackable: Boolean): Boolean; overload;
var
  i, ItemSlot, CurrentItemAmount, InvSlot: Int32;
  t: UInt64;
  WaitAmountBoolean: Boolean;
  WithdrawMode: EBankButton = BANK_BUTTON_WITHDRAW_ITEM;
  UpText: String;
begin
  if not Self.IsOpen() then
    Exit(False);

  ChooseOption.Close();

  if Inventory.Contains(DTM) then
  begin
    InvSlot := Inventory.FindDTM(DTM)[0];
    CurrentItemAmount := Inventory.SlotAmount(InvSlot);
  end
  else if not Inventory.HasSpace(1) then
    Exit(False)
  else
  begin
    InvSlot := Inventory.GetEmptySlots()[0];
    CurrentItemAmount := 0;
  end;

  ItemSlot := Self.ScrollToDTM(Tab, DTM);

  if (ItemSlot < 0) then
    Exit(False)
  else if (ItemAmount = -1) and (Self.SlotAmount(ItemSlot) < 1) then
    Exit(False)
  else if (Self.SlotAmount(ItemSlot) < ItemAmount) then
    Exit(False);

  Self.ClickButton(WithdrawMode, mouse_Left);
  Self.ClickButton(Quantity, mouse_Left);

  t := GetTickCount() + Random(5000, 6000);
  repeat
    Mouse.Move(Self.GetSlotBox(ItemSlot));

    if ItemAmount > 4 then
    begin
      if Self.IsUpText([IntToStr(ItemAmount)]) then
        Mouse.Click(mouse_Left)
      else
        Self.Withdraw(ItemSlot, ItemAmount, SubStrings, WithdrawMode, Quantity);
    end

    else

    begin
      if (ItemAmount > 0) and (Quantity = BANK_BUTTON_QUANTITY_ONE) then
      begin
        for i := 1 to ItemAmount do
        begin
          Mouse.Click(mouse_left);
          Wait(100, 250);
        end;
      end
      else
      begin
        if ItemAmount = -1 then
          UpText := 'All'
        else
          UpText := IntToStr(ItemAmount);

        if Self.IsUpText([UpText]) then
          Mouse.Click(mouse_left)
        else
          Self.Withdraw(ItemSlot, ItemAmount, SubStrings, WithdrawMode, Quantity);
      end;
    end;

    if (t > GetTickCount()) then
      Break;
    if ItemAmount = -1 then
      WaitAmountBoolean := Inventory.WaitSlotAmount(InvSlot, CurrentItemAmount, 1200, __GT__)
    else
      WaitAmountBoolean := Inventory.WaitSlotAmount(InvSlot, (CurrentItemAmount + ItemAmount), 1200);
  until WaitAmountBoolean;

  Result := Inventory.WaitSlotAmount(InvSlot, CurrentItemAmount, 0, __GT__) ;
end;

function TRSBankScreen.WithdrawDTM2(Tab: EBankTab; DTM, NoteDTM: Integer; ItemAmount: Int32 = -1; SubStrings: TStringArray; Quantity: EBankButton = BANK_BUTTON_QUANTITY_ONE; Stackable: Boolean): Boolean; overload;
var
  i, ItemSlot, CurrentItemAmount, InvSlot: Int32;
  t: UInt64;
  WaitAmountBoolean: Boolean;
  WithdrawMode: EBankButton = BANK_BUTTON_WITHDRAW_NOTE;
  UpText: String;
begin
  if not Self.IsOpen() then
    Exit(False);

  ChooseOption.Close();

  if Inventory.Contains(NoteDTM) then
  begin
    InvSlot := Inventory.FindDTM(NoteDTM)[0];
    CurrentItemAmount := Inventory.SlotAmount(InvSlot);
  end
  else if not Inventory.HasSpace(1) then
    Exit(False)
  else
  begin
    InvSlot := Inventory.GetEmptySlots()[0];
    CurrentItemAmount := 0;
  end;

  ItemSlot := Self.ScrollToDTM(Tab, DTM);

  if (ItemSlot < 0) then
    Exit(False)
  else if (ItemAmount = -1) and (Self.SlotAmount(ItemSlot) < 1) then
    Exit(False)
  else if (Self.SlotAmount(ItemSlot) < ItemAmount) then
    Exit(False);

  Self.ClickButton(WithdrawMode, mouse_Left);
  Self.ClickButton(Quantity, mouse_Left);

  t := GetTickCount() + Random(5000, 6000);
  repeat
    Mouse.Move(Self.GetSlotBox(ItemSlot));

    if ItemAmount > 4 then
    begin
      if Self.IsUpText([IntToStr(ItemAmount)]) then
        Mouse.Click(mouse_Left)
      else
        Self.Withdraw(ItemSlot, ItemAmount, SubStrings, WithdrawMode, Quantity);
    end

    else

    begin
      if (ItemAmount > 0) and (Quantity = BANK_BUTTON_QUANTITY_ONE) then
      begin
        for i := 1 to ItemAmount do
        begin
          Mouse.Click(mouse_left);
          Wait(100, 250);
        end;
      end
      else
      begin
        if ItemAmount = -1 then
          UpText := 'All'
        else
          UpText := IntToStr(ItemAmount);

        if Self.IsUpText([UpText]) then
          Mouse.Click(mouse_left)
        else
          Self.Withdraw(ItemSlot, ItemAmount, SubStrings, WithdrawMode, Quantity);
      end;
    end;

    if (t > GetTickCount()) then
      Break;
    if ItemAmount = -1 then
      WaitAmountBoolean := Inventory.WaitSlotAmount(InvSlot, CurrentItemAmount, 1200, __GT__)
    else
      WaitAmountBoolean := Inventory.WaitSlotAmount(InvSlot, (CurrentItemAmount + ItemAmount), 1200);
  until WaitAmountBoolean;

  Result := Inventory.WaitSlotAmount(InvSlot, CurrentItemAmount, 0, __GT__) ;
end;

// See TRSBankScreen.FindSecondDTM
function TRSBankScreen.WithdrawSecondDTMFromTab(Tab: EBankTab; DTM: Integer; ItemAmount: Int32 = 1337; SubStrings: TStringArray; AmountBtn: EBankButton = BANK_BUTTON_QUANTITY_ONE): Boolean;
var
  i, item_slot, inv_count: Int32;
begin
  if ((not Self.IsOpen) or (Self.IsOpen() and Inventory.IsFull())) then
    Exit(False);

  item_slot := Self.FindSecondDTM(DTM);
  if (item_slot = -1) then
  begin
    if Self.ScrollToDTM(Tab, DTM) <> -1 then
      item_slot := Self.FindSecondDTM(DTM)
    else
      Exit(False);
  end;

  inv_count := Inventory.Count();

  repeat
    if Inventory.IsFull() then
    begin
      //add Self.DepositItems instead
      Self.ClickButton(BANK_BUTTON_DEPOSIT_INVENTORY, mouse_Left);
      Exit(False);
    end;
    if (Self.SlotAmount(item_slot) <= 1) then
       Exit(False);

    if (ItemAmount > 4) then
    begin
      ChooseOption.Close();

      if Self.IsToggled(AmountBtn) then
      begin
        if not Keyboard.isKeyDown(VK_SHIFT) then
        begin
          Keyboard.KeyDown(VK_SHIFT);
          WaitEx(110,10);
        end;
      end;

      Mouse.Move(Self.GetSlotBox(item_slot));
      if (ItemAmount = 1337) and Self.IsUpText(['All']) then
        Mouse.Click(mouse_Left)
      else if Self.IsUpText([IntToStr(ItemAmount)]) then
        Mouse.Click(mouse_Left)
      else
      begin
        if Keyboard.isKeyDown(VK_SHIFT) then
        begin
          Keyboard.KeyUp(VK_SHIFT);
          WaitEx(110,10);
        end;
        Self.Withdraw(item_slot, ItemAmount, SubStrings, BANK_BUTTON_WITHDRAW_ITEM);
      end;

      if Keyboard.isKeyDown(VK_SHIFT) then
      begin
        Keyboard.KeyUp(VK_SHIFT);
        WaitEx(110,10);
      end;
    end

    else
    begin

      if (AmountBtn = BANK_BUTTON_QUANTITY_ONE) then
      begin
        if not Self.IsToggled(AmountBtn) then
          Self.ClickButton(AmountBtn, mouse_Left);
        for i:=1 to ItemAmount do
        begin
          if (Inventory.Count(DTM) = 3) then
            break;
          Mouse.Click(mouse_left);
          Sleep(Random(100, 250));
        end;
      end
      else
      begin
        if not Self.IsToggled(AmountBtn) then
          Self.ClickButton(AmountBtn, mouse_Left);
        Mouse.Move(Self.GetSlotBox(item_slot));
        if Self.IsUpText([IntToStr(ItemAmount)]) then
        begin
          Mouse.Click(mouse_left);
          Sleep(Random(100, 250));
        end
        else
          Self.Withdraw(item_slot, ItemAmount, SubStrings, BANK_BUTTON_WITHDRAW_ITEM, AmountBtn);
      end;
    end;

    Inventory.WaitCount((inv_count + ItemAmount), 1200);
  until (Inventory.Count(DTM) >= ItemAmount) or ((ItemAmount=1337) and Inventory.IsFull());

  Result := True;

end;


procedure BankScreen.Free();
begin
  FreeDTM(NoteDTM);
end;

begin
  AddOnTerminate(@BankScreen.Free);
end;
