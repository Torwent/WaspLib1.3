type
  TWaspWalker = record
    Position: TPoint;
  end;

var
  WaspRSW: TRSWalker;
  WaspWalker: TWaspWalker;

function WaspWalker.AtLocation(Map: TRSWalker; Tile: TPoint; Distance: Int32 = 15): Boolean;
begin
  Result := Map.GetMyPos.DistanceTo(Tile) <= Distance;
end;

function WaspWalker.AtLocation(Map: TRSWalker; TilesArray: TPointArray; Distance: Int32 = 15): Boolean; overload;
var
  i: Int32;
begin
  Result := False

  for i := 0 to High(TilesArray) do
  begin
    if (Map.GetMyPos.DistanceTo(TilesArray[i]) <= Distance) then
      Exit(True);
  end;
end;

function WaspWalker.AtLocation(Map: TRSWalker; TilesArrayArray: T2DPointArray; Distance: Int32 = 15): Boolean; overload;
var
  Idx, i: Int32;
begin
  Result := False

  for Idx := 0 to High(TilesArrayArray) do
    for i := 0 to High(TilesArrayArray[Idx]) do
      if (Map.GetMyPos.DistanceTo(TilesArrayArray[Idx][i]) <= Distance) then
        Exit(True);

end;


function WaspWalker.TileVisible(Map: TRSWalker; Tile: TPoint): Boolean;
begin
  Result := Mainscreen.FBounds.Contains(Map.GetTileMS(Tile));
end;

function WaspWalker.TileVisible(Map: TRSWalker; Tiles: TPointArray): Boolean; overload;
var
  i: Int32;
begin
  Result := False;
  for i := 0 to High(Tiles) do
    if Self.TileVisible(Map, Tiles[i]) then
      Exit(True);
end;

function WaspWalker.UntilTileVisible(Map: TRSWalker; Tile: TPoint; WaitTime: UInt32 = 0): Boolean;
var
  t: UInt64;
begin
  t := GetTickCount() + WaitTime;

  repeat
    if (Self.TileVisible(Map, Tile)) then
      Exit(True)
    else if (WaitTime > 0) then
      Wait(Random(25, 50));
  until (GetTickCount() >= t);
end;

function WaspWalker.UntilTileVisible(Map: TRSWalker; Tiles: TPointArray; WaitTime: UInt32 = 0): Boolean; overload;
var
  t: UInt64;
begin
  t := GetTickCount() + WaitTime;

  repeat
    if (Self.TileVisible(Map, Tiles)) then
      Exit(True)
    else if (WaitTime > 0) then
      Wait(Random(25, 50));
  until (GetTickCount() >= t);
end;

function WaspWalker.WalkUntilTileVisible(Map: TRSWalker; Tile: TPoint; MaxDistance: Int32 = 10; WaitTime: UInt32 = 0): Boolean;
var
  t: UInt64;
begin
  if Self.TileVisible(Map, Tile) and Self.AtLocation(Map, Tile, MaxDistance) then
    Exit(True);

  t := GetTickCount() + WaitTime;

  repeat
    Self.WalkToTile2(Map, Tile, 10);
    Mouse.Move(MainScreen.GetPlayerBox());
    if Self.TileVisible(Map, Tile) and Self.AtLocation(Map, Tile, MaxDistance) then
      Exit(True)
    else if (WaitTime > 0) then
      Map.WaitPlayerMoving(1600);
  until (GetTickCount() >= t);

  Result := Self.TileVisible(Map, Tile) and Self.AtLocation(Map, Tile, MaxDistance);
end;

function WaspWalker.WalkUntilTileVisible(Map: TRSWalker; Tiles: TPointArray; MaxDistance: Int32 = 10; WaitTime: UInt32 = 0): Boolean; overload;
var
  t: UInt64;
begin
  if Self.TileVisible(Map, Tiles) and Self.AtLocation(Map, Tiles, MaxDistance) then
    Exit(True);

  t := GetTickCount() + WaitTime;

  repeat
    Self.WalkToTile2(Map, Tiles[Random(0, High(Tiles))], 10);
    Mouse.Move(MainScreen.GetPlayerBox());
    if Self.TileVisible(Map, Tiles) and Self.AtLocation(Map, Tiles, MaxDistance) then
      Exit(True)
    else if (WaitTime > 0) then
      Map.WaitPlayerMoving(1600);
  until (GetTickCount() >= t);

  Result := Self.TileVisible(Map, Tiles) and Self.AtLocation(Map, Tiles, MaxDistance);
end;

// Compares Tiles with the Player position and returns the closest one.
// If the Distance is the same for more than one, a random one will be returned.
function WaspWalker.GetClosestTile(Map: TRSWalker = WaspRSW; Tiles: TPointArray): TPoint;
var
  i: Int32;
  ClosestDistances: TIntArray;
  Distances: TExtendedArray;
begin
  for i := 0 to High(Tiles) do
    Distances += Map.GetMyPos.DistanceTo(Tiles[i]);

   ClosestDistances := Distances.FindAll(Distances.Min());

  Result := Tiles[ClosestDistances[Random(0, High(ClosestDistances))]];
end;

// Same as above but with ATPAs. Finds the closes distance to the closest tile of each array
// and returns the closest array. If the Distance is the same for more than one, will return a random one.
function WaspWalker.GetClosestTile(Map: TRSWalker = WaspRSW; TilesArray: T2DPointArray): TPointArray; overload;
var
  Idx, i: Int32;
  ClosestDistPos: TIntArray;
  Distances, ClosestDistances: TExtendedArray;
begin

  for Idx := 0 to High(TilesArray) do
  begin
    for i := 0 to High(TilesArray[Idx]) do
      Distances += Map.GetMyPos.DistanceTo(TilesArray[Idx][i]);
    ClosestDistances += Distances.Min();
    Distances := [];
  end;

  ClosestDistPos := ClosestDistances.FindAll(ClosestDistances.Min());

  Result := TilesArray[ClosestDistPos[Random(0, High(ClosestDistPos))]];
end;


function WaspWalker.CompensateMousePos(CurrentTile, DestinationTile: Tpoint): TPoint;
var
  Point: TPoint;
begin

  if CurrentTile.X > DestinationTile.X then
    Point.X := DestinationTile.X + 4
  else if CurrentTile.X < DestinationTile.X then
    Point.X := DestinationTile.X - 4
  else
    Point.X := DestinationTile.X;

  if CurrentTile.Y > DestinationTile.Y then
    Point.Y := DestinationTile.Y + 4
  else if CurrentTile.Y < DestinationTile.Y then
    Point.Y := DestinationTile.X - 4
  else
    Point.Y := DestinationTile.Y;
  Result := Point;
end;

function WaspWalker.CompensateMousePos(Map: TRSWalker; DestinationTile: Tpoint): TPoint; overload;
begin
  Result := Self.CompensateMousePos(Map.GetMyPos(), DestinationTile);
end;


function WaspWalker.WalkToTile(Map: TRSWalker = WaspRSW; Tile: TPoint; Distance: Int32 = 10): Boolean;
begin

  if Self.AtLocation(Map, Tile, Distance) then
    Exit(True);

  if ((Minimap.GetRunEnergy() > Random(40, 60)) and (not Minimap.isRunEnabled())) then
    Minimap.ToggleRun(True);

  Result := Map.WalkPath([Tile], Distance);
end;

procedure WaspWalker.WalkToTile2(Map: TRSWalker = WaspRSW; Tile: TPoint; Distance: Int32 = 10);
begin
  if Self.AtLocation(Map, Tile, Distance) then
    Exit();

  if (Minimap.GetRunEnergy() > Random(40, 60)) and not Minimap.isRunEnabled() then
    Minimap.ToggleRun(True);

  Map.WalkStep(Tile, Distance, False);
end;


procedure TRSWalker.WalkToPosAlching(mmPos:TPoint; Rnd:Int32=0; doRand:Boolean=False; InvSlot: Int32 = 11);
var
  i,st: Int64;
  t: TCountDown;
  flag: TPoint;
  B: TBox;
  skipDist: Double;
begin
  mmPos := RotatePoint(mmPos, Minimap.GetCompassAngle(False), Minimap.Center.X, Minimap.Center.Y);
  skipDist := srl.SkewedRand(skipClose, 10, MM_RAD);

  if (doRand) then
    while (Rnd > 1) and (Hypot(mmPos.x-Minimap.Center.X, mmPos.y-Minimap.Center.Y) >= MM_RAD - Rnd*Sqrt(2)) do
      Dec(Rnd);

  if not Self.ScreenWalk then
    mouse.Click(mmPos, rnd, mouse_left)
  else begin
    B := Minimap.PointToMsBox(mmPos);
    B.LimitTo(Mainscreen.GetBounds);  //fucking self-alterting procedures (I did not make these!)
    mouse.Click(B, mouse_left);
  end;

  Spells.AlchSlot(InvSlot);

  Wait(300,500);
  t.Init(25000);
  repeat
    if  (i mod 2 = 0) and (Minimap.GetRunEnergy >= self.MinRunEnergy) then
      Minimap.ToggleRun(True);

    if Minimap.FindFlag(flag) then
    begin
      if (flag.DistanceTo(Minimap.Center) < skipDist) then
        Break;
    end else if (Self.GetMyPos().DistanceTo(FPath[FPathIdx]) < skipDist) then
      Break;

    st := GetTickCount() + Random(60);
    if Assigned(@self.onMoveEvent) then
      self.onMoveEvent(@self);
    Wait( Max(1, st-GetTickCount()) );

  until (not self.Enabled) or (not Minimap.IsPlayerMoving(Self.MinimapShift)) or (t.IsFinished());
end;

function TRSWalker.WalkPathAlching(Path: TPointArray; InvSlot: Int32 = 11; ClickRnd: Int32 = 4; FinalCorrection: Boolean= False): Boolean;
var
  i,j,h,prev,tmp,attempts: Int32;
  nearest,distance: Double;
  mmPos, myPos: TPoint;
  t: TCountDown;

  function RandomizeRunEnergy(e:Int32):Int32;
  begin
    if e > 100 then Exit();
    Result := Random(max(5,e-10), e+10);
  end;
begin
  if Self.WorldMap = nil then
    RaiseException('TRSWalker.WalkPath -> RSWalker is not set up for this task!');

  self.Enabled := True;
  tmp := self.MinRunEnergy;

  // get start point in path
  myPos := Self.GetMyPos();
  nearest := 100000;
  for j:=0 to High(path) do
  begin
    distance := Hypot(path[j].x-myPos.x, path[j].y-myPos.y);
    if (distance < nearest) then
    begin
      nearest := distance;
      i := j;
    end;
  end;

  // generate a dense path from starting point
  FPath := Copy(path, i, Length(path)-i);
  FPath := RSWUtils.BuildPath([myPos]+FPath, 1,6);

  // do the walk
  t.Init(Random(23000, 27000));
  FPathIdx := 0;
  H := High(FPath);
  while (FPathIdx < H) and (not t.IsFinished())  do
  begin
    self.minRunEnergy := RandomizeRunEnergy(self.minRunEnergy);
    myPos := Self.GetMyPos();

    if not Self.ScreenWalk then
    begin
      while (FPathIdx < H) and (Hypot(myPos.x-FPath[FPathIdx+1].x, myPos.y-FPath[FPathIdx+1].y) < MM_RAD) do
        Inc(FPathIdx);
    end else
    begin
      while (FPathIdx < H) and Mainscreen.FBounds.Contains(Minimap.PointToMs(FPath[FPathIdx+1] - myPos + minimap.Center)) do
        Inc(FPathIdx);
    end;

    if prev = FPathIdx then
    begin
      Inc(attempts);
      if attempts > 7 then
      begin
        self.MinRunEnergy := tmp;
        Exit(False);
      end;
    end else
      attempts := 0;

    mmPos := FPath[FPathIdx] - myPos + minimap.Center;

    if Assigned(@self.onWalkEvent) then
    begin
      self.onWalkEvent(@self, myPos);
      if not(self.Enabled) then
      begin
        self.MinRunEnergy := tmp;
        Exit(True);
      end;
    end;

    self.WalkToPosAlching(mmPos, ClickRnd, FPathIdx<>h);


    if not(self.Enabled) then
    begin
      self.MinRunEnergy := tmp;
      Exit(True);
    end;

    prev := FPathIdx;
    t.Init(Random(20000, 25000));
  end;

  self.WaitPlayerMoving();
  myPos  := Self.GetMyPos();
  Result := Hypot(myPos.x-FPath[h].x, myPos.y-FPath[h].y) < 16;

  if Result and FinalCorrection then
  begin
    distance := Hypot(myPos.x-FPath[h].x, myPos.y-FPath[h].y);
    if (distance < MM_RAD) and (distance > 6) then
    begin
      mmPos.x := (FPath[h].x - myPos.x) + Minimap.Center.X;
      mmPos.y := (FPath[h].y - myPos.y) + Minimap.Center.Y;
      self.WalkToPos(mmPos, 1, True);
      self.WaitPlayerMoving();
    end;
  end;

  self.minRunEnergy := tmp;
end;

function WaspWalker.WalkToTileAlching(Map: TRSWalker = WaspRSW; Tile: TPoint; Distance: Int32 = 10; InvSlot: Int32 = 11): Boolean;
begin

  if Self.AtLocation(Map, Tile, Distance) then
    Exit(True);

  if ((Minimap.GetRunEnergy() > Random(40, 60)) and (not Minimap.isRunEnabled())) then
    Minimap.ToggleRun(True);

  Result := Map.WalkPathAlching([Tile], Distance, InvSlot);
end;

function WaspWalker.GotTeleported(WaitTime: UInt32 = 2400): Boolean;
var
  t: UInt64;
  StartPos: TPoint;
begin
  t := GetTickCount() + WaitTime;
  StartPos := WaspRSW.GetMyPos();
  Result := False;
  Wait(WaitTime);
  repeat
    if (WaspRSW.GetMyPos.DistanceTo(StartPos) > 25) then
      Exit(True)
    else if (WaitTime > 0) then
      Wait(Random(25, 50));
  until (GetTickCount() >= t);
end;

procedure WaspWalker.DebugMSTiles(Map: TRSWalker; Tiles: TPointArray);
var
  BMP, i, c: Integer;
  TileBox: TBox;
begin
  BMP := BitmapFromClient(GetClientBounds());
  c := 255;

  for i:=0 to High(Tiles) do
  begin
    TileBox := Map.GetTileMS(Tiles[i]).Bounds();
    DrawTPABitmap(BMP, EdgeFromBox(TileBox), c);
    c := i + ((c * 128) and $FFFFFF);
    WriteLn(c);
  end;

  ShowBitmap(BMP);
  FreeBitmap(BMP);
end;

procedure WaspWalker.LoadMapSlices(Map: String; Slices: TPointArray);
begin
   WaspRSW.Free();
   WaspRSW.InitEx(Map, Slices);
end;


procedure WaspWalker.Free();
begin
  WaspRSW.Free();
end;

begin
  WaspRSW.Init('world.png');
  AddOnTerminate(@WaspWalker.Free);
end;
