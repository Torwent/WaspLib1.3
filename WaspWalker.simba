type
  TWaspWalker = record
    Position: TPoint;
  end;

var
  WaspRSW: TRSWalker;
  WaspWalker: TWaspWalker;

function WaspWalker.AtLocation(Map: TRSWalker; Tile: TPoint; Distance: Int32 = 15): Boolean;
begin
  Result := Map.GetMyPos.DistanceTo(Tile) <= Distance;
end;

function WaspWalker.AtLocation(Map: TRSWalker; TilesArray: TPointArray; Distance: Int32 = 15): Boolean; overload;
var
  i: Int32;
begin
  Result := False

  for i := 0 to High(TilesArray) do
  begin
    if (Map.GetMyPos.DistanceTo(TilesArray[i]) <= Distance) then
      Exit(True);
  end;
end;

function WaspWalker.AtLocation(Map: TRSWalker; TilesArrayArray: T2DPointArray; Distance: Int32 = 15): Boolean; overload;
var
  Idx, i: Int32;
begin
  Result := False

  for Idx := 0 to High(TilesArrayArray) do
    for i := 0 to High(TilesArrayArray[Idx]) do
      if (Map.GetMyPos.DistanceTo(TilesArrayArray[Idx][i]) <= Distance) then
        Exit(True);

end;


function WaspWalker.TileVisible(Map: TRSWalker = WaspRSW; Tile: TPoint): Boolean;
begin
  Result := Mainscreen.FBounds.Contains(Map.GetTileMS(Tile));
end;

function WaspWalker.TileVisible(Map: TRSWalker = WaspRSW; Tiles: TPointArray): Boolean; overload;
var
  i: Int32;
begin
  Result := False;
  for i := 0 to High(Tiles) do
    if Self.TileVisible(Map, Tiles[i]) then
      Exit(True);
end;

// Compares Tiles with the Player position and returns the closest one.
// If the Distance is the same for more than one, a random one will be returned.
function WaspWalker.GetClosestTile(Map: TRSWalker = WaspRSW; Tiles: TPointArray): TPoint;
var
  i: Int32;
  ClosestDistances: TIntArray;
  Distances: TExtendedArray;
begin
  for i := 0 to High(Tiles) do
    Distances += Map.GetMyPos.DistanceTo(Tiles[i]);

   ClosestDistances := Distances.FindAll(Distances.Min());

  Result := Tiles[ClosestDistances[Random(0, High(ClosestDistances))]];
end;

// Same as above but with ATPAs. Finds the closes distance to the closest tile of each array
// and returns the closest array. If the Distance is the same for more than one, will return a random one.
function WaspWalker.GetClosestTile(Map: TRSWalker = WaspRSW; TilesArray: T2DPointArray): TPointArray; overload;
var
  Idx, i: Int32;
  ClosestDistPos: TIntArray;
  Distances, ClosestDistances: TExtendedArray;
begin

  for Idx := 0 to High(TilesArray) do
  begin
    for i := 0 to High(TilesArray[Idx]) do
      Distances += Map.GetMyPos.DistanceTo(TilesArray[Idx][i]);
    ClosestDistances += Distances.Min();
    Distances := [];
  end;

  ClosestDistPos := ClosestDistances.FindAll(ClosestDistances.Min());

  Result := TilesArray[ClosestDistPos[Random(0, High(ClosestDistPos))]];
end;


function WaspWalker.WalkToTile(Map: TRSWalker = WaspRSW; Tile: TPoint; Distance: Int32 = 10): Boolean;
begin

  if Self.AtLocation(Map, Tile, Distance) then
    Exit(True);

  if ((Minimap.GetRunEnergy() > Random(40, 60)) and (not Minimap.isRunEnabled())) then
    Minimap.ToggleRun(True);

  Result := Map.WalkPath([Tile], 3);
end;

function WaspWalker.GotTeleported(WaitTime: UInt32 = 2400): Boolean;
var
  t: UInt64;
  StartPos: TPoint;
begin
  t := GetTickCount() + WaitTime;
  StartPos := WaspRSW.GetMyPos();
  Result := False;
  Wait(WaitTime);
  repeat
    if (WaspRSW.GetMyPos.DistanceTo(StartPos) > 25) then
      Exit(True)
    else if (WaitTime > 0) then
      Wait(Random(25, 50));
  until (GetTickCount() >= t);
end;

procedure WaspWalker.DebugMSTiles(Map: TRSWalker; Tiles: TPointArray);
var
  BMP, i, c: Integer;
  TileBox: TBox;
begin
  BMP := BitmapFromClient(GetClientBounds());
  c := 255;

  for i:=0 to High(Tiles) do
  begin
    TileBox := Map.GetTileMS(Tiles[i]).Bounds();
    DrawTPABitmap(BMP, EdgeFromBox(TileBox), c);
    c := i + ((c * 128) and $FFFFFF);
    WriteLn(c);
  end;

  ShowBitmap(BMP);
  FreeBitmap(BMP);
end;


procedure WaspWalker.LoadMapSlices(Map: String; Slices: TPointArray);
begin
   WaspRSW.Free();
   WaspRSW.InitEx(Map, Slices);
end;


procedure WaspWalker.Free();
begin
  WaspRSW.Free();
end;

begin
  WaspRSW.Init('world.png');
  AddOnTerminate(@WaspWalker.Free);
end;
