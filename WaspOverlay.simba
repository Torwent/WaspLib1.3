{$loadlib ../Includes/WindowOverlay/libWindowOverlay}

// --- Overlay Window --- \\

var
  Overlays: array of TWindowOverlay;

procedure Overlay_Sync(Method: Pointer);
begin
  Sync(Method);
end;

procedure Overlay_Free;
var
  i: Int32;
begin
  for i := 0 to High(Overlays) do
    if (Overlays[i] <> nil) then
      Overlays[i].Free();
end;

// Manual mouse trails.
procedure MoveMouse(X, Y: Int32); override;
var
  i: Int32;
begin
  inherited(X, Y);

  for i := 0 to High(Overlays) do
    if (Overlays[i] <> nil) then
      Overlays[i].AddMouseHistory(X, Y, True);
end;


{$IFDEF RSCLIENT}
  function TWindowOverlay.Create(Client: TRSClient; Sync: TOverlaySync = @Overlay_Sync): TWindowOverlay; static; overload;
  begin
    Result.Init(Client.Child, Sync);

    Overlays += Result;
  end;
{$ENDIF}

procedure TWindowOverlay.Free; override;
var
  i: Int32;
begin
  inherited();

  for i := 0 to High(Overlays) do
    if (Overlays[i] = Self) then
      Overlays[i] := nil;
end;

// --- Overlay Bitmap --- \\

function TOverlayBitmap.ToMufasaBitmap(): TMufasaBitmap;
begin
  Result.Init(Client.GetMBitmaps());
  Result.SetPersistentMemory(PtrUInt(Self.Data), Self.Width, Self.Height);
end;

procedure TOverlayBitmap.Draw(P: TPoint; FilePath: String); constref; overload;
begin
  Self.Draw(P, PChar(FilePath));
end;

procedure TOverlayBitmap.Draw(P: TPoint; BMP: TMufasaBitmap); constref; overload;
begin
  Self.Draw(P, BMP.GetData(), BMP.GetWidth(), BMP.GetHeight());
end;

// --- Window Overlay Helpers ----

procedure TWindowOverlay.DrawText(Text, Font: String; Size: Int32; Bold, Smooth: Boolean; Position: TPoint; Color: Int32); constref;
begin
  Self.Bitmaps[0].DrawText(Text, Font, Size, Bold, Smooth, Position, Color);
end;

procedure TWindowOverlay.DrawCircle(P: TPoint; Radius: Int32; Fill: Boolean; Color: Int32); constref;
begin
  Self.Bitmaps[0].DrawCircle(P, Radius, Fill, Color);
end;

procedure TWindowOverlay.DrawBox(Box: TBox; Fill: Boolean; Color: Int32); constref;
begin
  Self.Bitmaps[0].DrawBox(Box, Fill, Color);
end;

procedure TWindowOverlay.DrawTPA(TPA: TPointArray; Color: Int32); constref;
begin
  Self.Bitmaps[0].DrawTPA(TPA, Color);
end;

procedure TWindowOverlay.DrawATPA(ATPA: T2DPointArray); constref;
begin
  Self.Bitmaps[0].DrawATPA(ATPA);
end;

procedure TWindowOverlay.Clear(Color: Int32 = 0); constref; overload;
begin
  Self.Bitmaps[0].Clear(Color);
end;

procedure TWindowOverlay.Clear(Box: TBox; Color: Int32 = 0); constref; overload;
begin
  Self.Bitmaps[0].Clear(Box, Color);
end;

procedure TWindowOverlay.CalculateText(Text, Font: String; Size: Int32; Bold: Boolean; var W, H: Int32); constref; overload;
begin
  Self.Bitmaps[0].CalculateText(Text, Font, Size, Bold, W, H);
end;

procedure TWindowOverlay.DrawText(Text, Font: String; Size: Int32; Bold, Smooth: Boolean; WordBreak: Boolean; Box: TBox; Color: Int32); constref; overload;
begin
  Self.Bitmaps[0].DrawText(Text, Font, Size, Bold, Smooth, WordBreak, Box, Color);
end;

procedure TWindowOverlay.CalculateText(Text, Font: String; Size: Int32; Bold: Boolean; WordBreak: Boolean; var Box: TBox); constref; overload;
begin
  Self.Bitmaps[0].CalculateText(Text, Font, Size, Bold, WordBreak, Box);
end;

function TWindowOverlay.Width: Int32; constref;
begin
  Result := Self.Bitmaps[0].Width;
end;

function TWindowOverlay.Height: Int32; constref;
begin
  Result := Self.Bitmaps[0].Height;
end;

function TWindowOverlay.Data: PRGB32; constref;
begin
  Result := Self.Bitmaps[0].Data;
end;

procedure TWindowOverlay.Draw(P: TPoint; Src: PRGB32; SrcW, SrcH: Int32); constref; overload;
begin
  Self.Bitmaps[0].Draw(P, Src, SrcW, SrcH);
end;

procedure TWindowOverlay.Draw(P: TPoint; FilePath: PChar); constref; overload;
begin
  Self.Bitmaps[0].Draw(P, FilePath);
end;

procedure TWindowOverlay.Draw(P: TPoint; BMP: TOverlayBitmap); constref; overload;
begin
  Self.Bitmaps[0].Draw(P, BMP);
end;

procedure TWindowOverlay.DrawLine(Start, Stop: TPoint; Color: Int32); constref;
begin
  Self.Bitmaps[0].DrawLine(Start, Stop, Color);
end;

procedure TWindowOverlay.DrawTPARainbow(TPA: TPointArray); constref;
begin
  Self.Bitmaps[0].DrawTPARainbow(TPA);
end;

procedure TWindowOverlay.SetPixel(X, Y: Int32; Color: Int32); constref;
begin
  Self.Bitmaps[0].SetPixel(X, Y, Color);
end;

function TWindowOverlay.GetPixel(X, Y: Int32): Int32; constref;
begin
  Result := Self.Bitmaps[0].GetPixel(X, Y);
end;

procedure TWindowOverlay.Draw(P: TPoint; FilePath: String); constref; overload;
begin
  Self.Bitmaps[0].Draw(P, PChar(FilePath));
end;

procedure TWindowOverlay.Draw(P: TPoint; BMP: TMufasaBitmap); constref; overload;
begin
  Self.Bitmaps[0].Draw(P, BMP.GetData(), BMP.GetWidth(), BMP.GetHeight());
end;

function TWindowOverlay.ToMufasaBitmap: TMufasaBitmap; constref;
begin
  Result := Self.Bitmaps[0].ToMufasaBitmap();
end;

begin
  AddOnTerminate('Overlay_Free');
end;
